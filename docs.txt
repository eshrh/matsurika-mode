(setq mts-docs '(("bytes?" . "FUNCTION
(bytes? x)

Check if x is a string, symbol, keyword, or buffer.
Defined in boot.janet -- 108 : 1")
("+=" . "MACRO
(+= x n)

Increments the var x by n.
Defined in boot.janet -- 147 : 1")
("assert" . "MACRO
(assert x &opt err)

Throw an error if x is not truthy. Will not evaluate `err` if x is truthy.
Defined in boot.janet -- 153 : 1")
("sym:" . "FUNCTION
(symbol/slice bytes &opt start end)

Same a string/slice, but returns a symbol.
Defined in src/core/string.c -- 187 : 1")
("inc" . "FUNCTION
(inc x)

Returns x + 1.
Defined in boot.janet -- 143 : 1")
("inf" . "FUNCTION
The number representing positive infinity
Defined in src/core/math.c -- 437 : 1")
("int32-min" . "FUNCTION
The minimum contiguous integer representable by a 32 bit signed integer
Defined in src/core/math.c -- 441 : 1")
("if-let" . "MACRO
(if-let bindings tru &opt fal)

Make multiple bindings, and if all are truthy,
evaluate the tru form. If any are false or nil, evaluate
the fal form. Bindings have the same syntax as the let macro.
Defined in boot.janet -- 633 : 1")
("cancel" . "FUNCTION
(cancel fiber err)

Resume a fiber but have it immediately raise an error. This lets a programmer unwind a pending fiber. Returns the same result as resume.")
("buf-bit" . "FUNCTION
(buffer/bit buffer index)

Gets the bit at the given bit-index. Returns true if the bit is set, false if not.
Defined in src/core/buffer.c -- 379 : 1")
("compile" . "FUNCTION
(compile ast &opt env source lints)

Compiles an Abstract Syntax Tree (ast) into a function. Pair the compile function with parsing functionality to implement eval. Returns a new function and does not modify ast. Returns an error struct with keys :line, :column, and :error if compilation fails. If a `lints` array is given, linting messages will be appended to the array. Each message will be a tuple of the form `(level line col message)`.
Defined in src/core/compile.c -- 999 : 1")
("atanh" . "FUNCTION
(math/atanh x)

Returns the hyperbolic arctangent of x.
Defined in src/core/math.c -- 275 : 1")
("id" . "FUNCTION
(id x)


Defined in boot.janet -- 3844 : 1")
("errorf" . "FUNCTION
(errorf fmt & args)

A combination of error and s-fmt. Equivalent to (error (s-fmt fmt ;args))
Defined in boot.janet -- 163 : 1")
("in" . "FUNCTION
(in ds key &opt dflt)

Get value in ds at key, works on associative data structures. Arrays, tuples, tables, structs, strings, symbols, and buffers are all associative and can be used. Arrays, tuples, strings, buffers, and symbols must use integer keys that are in bounds or an error is raised. Structs and tables can take any value as a key except nil and will return nil or dflt if not found.")
("--" . "MACRO
(-- x)

Decrements the var x by 1.
Defined in boot.janet -- 146 : 1")
("protect" . "MACRO
(protect & body)

Evaluate expressions, while capturing any errors. Evaluates to a tuple
of two elements. The first element is true if successful, false if an
error, and the second is the return value or error.
Defined in boot.janet -- 260 : 1")
("mapf" . "MACRO
(mapf form li)


Defined in boot.janet -- 3906 : 1")
("-<" . "MACRO
(-< x & forms)


Defined in boot.janet -- 3914 : 1")
("-=" . "MACRO
(-= x n)

Decrements the var x by n.
Defined in boot.janet -- 148 : 1")
("edefer" . "MACRO
(edefer form & body)

Run form after body in the case that body terminates abnormally (an error or user signal 0-4).
Otherwise, return last form in body.
Defined in boot.janet -- 330 : 1")
("->" . "MACRO
(-> x & forms)

Threading macro. Inserts x as the second value in the first form
in forms, and inserts the modified first form into the second form
in the same manner, and so on. Useful for expressing pipelines of data.
Defined in boot.janet -- 1200 : 1")
("file<-" . "FUNCTION
(file<- file-path)

Read all the data of a file, return a string
Defined in boot.janet -- 4013 : 1")
("coro" . "MACRO
(coro & body)

A wrapper for making fibers that may yield multiple values (coroutine). Same as (fiber/new (fn [] ;body) :yi).
Defined in boot.janet -- 604 : 1")
("buf<-byte" . "FUNCTION
(buffer/push-byte buffer & xs)

Append bytes to a buffer. Will expand the buffer as necessary. Returns the modified buffer. Will throw an error if the buffer overflows.
Defined in src/core/buffer.c -- 226 : 1")
("def-" . "MACRO
(def- name & more)

Define a private value that will not be exported.
Defined in boot.janet -- 68 : 1")
("eprin" . "FUNCTION
(eprin & xs)

Same as prin, but uses (dyn :err stderr) instead of (dyn :out stdout).
Defined in src/core/io.c -- 567 : 1")
("buf<-str" . "FUNCTION
(buffer/push-string buffer & xs)

Push byte sequences onto the end of a buffer. Will accept any of strings, keywords, symbols, and buffers. Returns the modified buffer. Will throw an error if the buffer overflows.
Defined in src/core/buffer.c -- 257 : 1")
("*args*" . "FUNCTION
Dynamic bindings that will contain command line arguments at program start
Defined in boot.janet -- 3625 : 1")
("os-rename" . "FUNCTION
(os/rename oldname newname)

Rename a file on disk to a new path. Returns nil.
Defined in src/core/os.c -- 1920 : 1")
("count" . "FUNCTION
(count pred ind)

Count the number of items in ind for which (pred item)
is true.
Defined in boot.janet -- 969 : 1")
("doc-format" . "FUNCTION
(doc-format str &opt width indent colorize)

Reformat a docstring to wrap a certain width. Docstrings can either be plaintext
  or a subset of markdown. This allows a long single line of prose or formatted text to be
  a well-formed docstring. Returns a buffer containing the formatted text.
Defined in boot.janet -- 2877 : 1")
("exp" . "FUNCTION
(math/exp x)

Returns e to the power of x.
Defined in src/core/math.c -- 276 : 1")
("cosh" . "FUNCTION
(math/cosh x)

Returns the hyperbolic cosine of x.
Defined in src/core/math.c -- 268 : 1")
("when" . "MACRO
(when condition & body)

Evaluates the body when the condition is true. Otherwise returns nil.
Defined in boot.janet -- 183 : 1")
("prewalk" . "FUNCTION
(prewalk f form)

Similar to postwalk, but do pre-order traversal.
Defined in boot.janet -- 1291 : 1")
("sh-run-do" . "MACRO
(sh-run-do forms)

Execute multiple programs
Defined in boot.janet -- 4126 : 1")
("next-after" . "FUNCTION
(math/next x y)

Returns the next representable floating point vaue after x in the direction of y.
Defined in src/core/math.c -- 306 : 1")
("//" . "MACRO
(// a b)


Defined in boot.janet -- 4188 : 1")
("min" . "FUNCTION
(min & args)

Returns the numeric minimum of the arguments.
Defined in boot.janet -- 706 : 1")
("/=" . "MACRO
(/= x n)

Shorthand for (set x (/ x n)).
Defined in boot.janet -- 150 : 1")
("not=" . "FUNCTION
(not= & xs)

Check if any values in xs are not equal. Returns a boolean.")
("when-with" . "MACRO
(when-with [binding ctor dtor] & body)

Similar to with, but if binding is false or nil, returns
nil without evaluating the body. Otherwise, the same as with.
Defined in boot.janet -- 385 : 1")
("update" . "FUNCTION
(update ds key func & args)

Accepts a key argument and passes its associated value to a function.
The key is then re-associated to the function's return value. Returns the updated
data structure `ds`.
Defined in boot.janet -- 1478 : 1")
("arr-ensure" . "FUNCTION
(array/ensure arr capacity growth)

Ensures that the memory backing the array is large enough for `capacity` items at the given rate of growth. Capacity and growth must be integers. If the backing capacity is already enough, then this function does nothing. Otherwise, the backing memory will be reallocated so that there is enough space.
Defined in src/core/array.c -- 194 : 1")
("thread-flip" . "FUNCTION
(thread-flip form)


Defined in boot.janet -- 3887 : 1")
("tab-getproto" . "FUNCTION
(table/getproto tab)

Get the prototype table of a table. Returns nil if a table has no prototype, otherwise returns the prototype.
Defined in src/core/table.c -- 307 : 1")
("*macro-form*" . "FUNCTION
Inside a macro, is bound to the source form that invoked the macro
Defined in boot.janet -- 1178 : 1")
("-?>>" . "MACRO
(-?>> x & forms)

Short circuit threading macro. Inserts x as the last value in the first form
in forms, and inserts the modified first form into the second form
in the same manner, and so on. The pipeline will return nil
if an intermediate value is nil.
Useful for expressing pipelines of data.
Defined in boot.janet -- 1242 : 1")
("blshift" . "FUNCTION
(blshift x & shifts)

Returns the value of x bit shifted left by the sum of all values in shifts. x and each element in shift must be an integer.")
("parser/consume" . "FUNCTION
(parser/consume parser bytes &opt index)

Input bytes into the parser and parse them. Will not throw errors if there is a parse error. Starts at the byte index given by index. Returns the number of bytes read.
Defined in src/core/parse.c -- 894 : 1")
("*macro-lints*" . "FUNCTION
Bound to an array of lint messgae that will be reported by the compiler inside a macro.  To indicate an error or warning, a macro author should use `maclintf`.
Defined in boot.janet -- 1914 : 1")
("file-open" . "FUNCTION
(file/open path &opt mode)

Open a file. `path` is an absolute or relative path, and `mode` is a set of flags indicating the mode to open the file in. `mode` is a keyword where each character represents a flag. If the file cannot be opened, returns nil, otherwise returns the new file handle. Mode flags:

* r - allow reading from the file

* w - allow writing to the file

* a - append to the file

Following one of the initial flags, 0 or more of the following flags can be appended:

* b - open the file in binary mode (rather than text mode)

* + - append to the file instead of overwriting it

* n - error if the file cannot be opened instead of returning nil
Defined in src/core/io.c -- 164 : 1")
("marshal" . "FUNCTION
(marshal x &opt reverse-lookup buffer)

Marshal a value into a buffer and return the buffer. The buffer can then later be unmarshalled to reconstruct the initial value. Optionally, one can pass in a reverse lookup table to not marshal aliased values that are found in the table. Then a forward lookup table can be used to recover the original value when unmarshalling.
Defined in src/core/marsh.c -- 1473 : 1")
("awk-str" . "FUNCTION
(awk-str data str)


Defined in boot.janet -- 4073 : 1")
("os-dir" . "FUNCTION
(os/dir dir &opt array)

Iterate over files and subdirectories in a directory. Returns an array of paths parts, with only the file name or directory name and no prefix.
Defined in src/core/os.c -- 1882 : 1")
("drop-until" . "FUNCTION
(drop-until pred ind)

Same as `(drop-while (complement pred) ind)`.
Defined in boot.janet -- 1125 : 1")
("fiber/status" . "FUNCTION
(fiber/status fib)

Get the status of a fiber. The status will be one of:

* :dead - the fiber has finished
* :error - the fiber has errored out
* :debug - the fiber is suspended in debug mode
* :pending - the fiber has been yielded
* :user(0-9) - the fiber is suspended by a user signal
* :alive - the fiber is currently running and cannot be resumed
* :new - the fiber has just been created and not yet run
Defined in src/core/fiber.c -- 571 : 1")
("prinf" . "FUNCTION
(prinf fmt & xs)

Like printf but with no trailing newline.
Defined in src/core/io.c -- 647 : 1")
("macex1" . "FUNCTION
(macex1 x &opt on-binding)

Expand macros in a form, but do not recursively expand macros.
See `macex` docs for info on on-binding.
Defined in boot.janet -- 1932 : 1")
("or" . "MACRO
(or & forms)

Evaluates to the last argument if all preceding elements are falsey, otherwise
evaluates to the first truthy element.
Defined in boot.janet -- 288 : 1")
("seedrandom" . "FUNCTION
(math/seedrandom seed)

Set the seed for the random number generator. seed should be an integer or a buffer.
Defined in src/core/math.c -- 241 : 1")
("file-temp" . "FUNCTION
(file/temp)

Open an anonymous temporary file that is removed on close. Raises an error on failure.
Defined in src/core/io.c -- 151 : 1")
("cbrt" . "FUNCTION
(math/cbrt x)

Returns the cube root of x.
Defined in src/core/math.c -- 283 : 1")
("print" . "FUNCTION
(print & xs)

Print values to the console (standard out). Value are converted to strings if they are not already. After printing all values, a newline character is printed. Use the value of (dyn :out stdout) to determine what to push characters to. Expects (dyn :out stdout) to be either a core/file or a buffer. Returns nil.
Defined in src/core/io.c -- 545 : 1")
("arr<-" . "FUNCTION
(array/push arr x)

Insert an element in the end of an array. Modifies the input array and returns it.
Defined in src/core/array.c -- 179 : 1")
("drop" . "FUNCTION
(drop n ind)

Drop the first n elements in an indexed or bytes type. Returns a new tuple or string
instance, respectively.
Defined in boot.janet -- 1113 : 1")
("parser/eof" . "FUNCTION
(parser/eof parser)

Indicate that the end of file was reached to the parser. This puts the parser in the :dead state.
Defined in src/core/parse.c -- 923 : 1")
("xprinf" . "FUNCTION
(xprinf to fmt & xs)

Like prinf but prints to an explicit file or value to. Returns nil.
Defined in src/core/io.c -- 672 : 1")
("parser/where" . "FUNCTION
(parser/where parser &opt line col)

Returns the current line number and column of the parser's internal state. If line is provided, the current line number of the parser is first set to that value. If column is also provided, the current column number of the parser is also first set to that value.
Defined in src/core/parse.c -- 1064 : 1")
("pi" . "FUNCTION
The value pi.
Defined in src/core/math.c -- 433 : 1")
("fiber/current" . "FUNCTION
(fiber/current)

Returns the currently running fiber.
Defined in src/core/fiber.c -- 587 : 1")
("peg>!" . "FUNCTION
(peg/match peg text &opt start & args)

Match a Parsing Expression Grammar to a byte string and return an array of captured values. Returns nil if text does not match the language defined by peg. The syntax of PEGs is documented on the Janet website.
Defined in src/core/peg.c -- 1668 : 1")
("deep=" . "FUNCTION
(deep= x y)

Like =, but mutable types (arrays, tables, buffers) are considered
equal if they have identical structure. Much slower than =.
Defined in boot.janet -- 2064 : 1")
("pp" . "FUNCTION
(pp x)

Pretty print to stdout or (dyn :out). The format string used is (dyn :pretty-format \"%q\").
Defined in boot.janet -- 1687 : 1")
("executable" . "FUNCTION
")
("peg>*" . "FUNCTION
(peg/find-all peg text &opt start & args)

Find all indexes where the peg matches in text. Returns an array of integers.
Defined in src/core/peg.c -- 1689 : 1")
("xprint" . "FUNCTION
(xprint to & xs)

Print to a file or other value explicitly (no dynamic bindings) with a trailing newline character. The value to print to is the first argument, and is otherwise the same as print. Returns nil.
Defined in src/core/io.c -- 573 : 1")
("with-dyns" . "MACRO
(with-dyns bindings & body)

Run a block of code in a new fiber that has some
dynamic bindings set. The fiber will not mask errors
or signals, but the dynamic bindings will be properly
unset, as dynamic bindings are fiber local.
Defined in boot.janet -- 1321 : 1")
("eval-string" . "FUNCTION
(eval-string str)

Evaluates a string in the current environment. If more control over the
environment is needed, use `run-context`.
Defined in boot.janet -- 2493 : 1")
("janet/build" . "FUNCTION
The build identifier of the running janet program.")
("pos?" . "FUNCTION
(pos? x)

Check if x is greater than 0.
Defined in boot.janet -- 778 : 1")
("peg/>*" . "FUNCTION
(peg/replace-all peg repl text &opt start & args)

Replace all matches of peg in text with repl, returning a new buffer. The peg does not need to make captures to do replacement.
Defined in src/core/peg.c -- 1730 : 1")
("drop-while" . "FUNCTION
(drop-while pred ind)

Given a predicate, remove elements from an indexed or bytes type that satisfy
the predicate, and abort on first failure. Returns a new tuple or string, respectively.
Defined in boot.janet -- 1135 : 1")
("s*" . "FUNCTION
(string/repeat bytes n)

Returns a string that is n copies of bytes concatenated.
Defined in src/core/string.c -- 203 : 1")
("s+" . "MACRO
(s+ & strings)

Concat strings with extra vars.Variables:qt - double quotesqt - single quotenl - newlinetb - tabs - space
Defined in boot.janet -- 3972 : 1")
("mod" . "FUNCTION
(mod dividend divisor)

Returns the modulo of dividend / divisor.")
("s/" . "FUNCTION
(string/split delim str &opt start limit)

Splits a string str with delimiter delim and returns an array of substrings. The substrings will not contain the delimiter delim. If delim is not found, the returned array will have one element. Will start searching for delim at the index start (if provided), and return up to a maximum of limit results (if provided).
Defined in src/core/string.c -- 436 : 1")
("log10" . "FUNCTION
(math/log10 x)

Returns the log base 10 of x.
Defined in src/core/math.c -- 280 : 1")
("prompt" . "MACRO
(prompt tag & body)

Set up a checkpoint that can be returned to. Tag should be a value
that is used in a return statement, like a keyword.
Defined in boot.janet -- 342 : 1")
("*err-color*" . "FUNCTION
Whether or not to turn on error coloring in stacktraces and other error messages.
Defined in boot.janet -- 2232 : 1")
("juxt" . "MACRO
(juxt & funs)

Macro form of juxt*. Same behavior but more efficient.
Defined in boot.janet -- 1151 : 1")
("s:" . "FUNCTION
(string/slice bytes &opt start end)

Returns a substring from a byte sequence. The substring is from index start inclusive to index end exclusive. All indexing is from 0. 'start' and 'end' can also be negative to indicate indexing from the end of the string. Note that index -1 is synonymous with index (length bytes) to allow a full negative slice range. 
Defined in src/core/string.c -- 175 : 1")
("s>" . "FUNCTION
(string/find patt str &opt start-index)

Searches for the first instance of pattern patt in string str. Returns the index of the first character in patt if found, otherwise returns nil.
Defined in src/core/string.c -- 311 : 1")
("arr><" . "FUNCTION
(array/trim arr)

Set the backing capacity of an array to its current length. Returns the modified array.
Defined in src/core/array.c -- 319 : 1")
("boolean?" . "FUNCTION
(boolean? x)

Check if x is a boolean.
Defined in boot.janet -- 107 : 1")
("file-close" . "FUNCTION
(file/close f)

Close a file and release all related resources. When you are done reading a file, close it to prevent a resource leak and let other processes read the file. If the file is the result of a file/popen call, close waits for and returns the process exit status.
Defined in src/core/io.c -- 330 : 1")
("os-mkdir" . "FUNCTION
(os/mkdir path)

Create a new directory. The path will be relative to the current directory if relative, otherwise it will be an absolute path. Returns true if the directory was created, false if the directory already exists, and errors otherwise.
Defined in src/core/os.c -- 1477 : 1")
("rng-buffer" . "FUNCTION
(math/rng-buffer rng n &opt buf)

Get n random bytes and put them in a buffer. Creates a new buffer if no buffer is provided, otherwise appends to the given buffer. Returns the buffer.
Defined in src/core/math.c -- 183 : 1")
("s^" . "FUNCTION
(string/ascii-upper str)

Returns a new string where all bytes are replaced with the uppercase version of themselves in ASCII. Does only a very simple case check, meaning no unicode support.
Defined in src/core/string.c -- 266 : 1")
("s_" . "FUNCTION
(string/ascii-lower str)

Returns a new string where all bytes are replaced with the lowercase version of themselves in ASCII. Does only a very simple case check, meaning no unicode support.
Defined in src/core/string.c -- 247 : 1")
("head" . "FUNCTION
(head xs)

Gets all but the last element of XS
Defined in boot.janet -- 3867 : 1")
("parser/has-more" . "FUNCTION
(parser/has-more parser)

Check if the parser has more values in the value queue.
Defined in src/core/parse.c -- 975 : 1")
("partition" . "FUNCTION
(partition n ind)

Partition an indexed data structure into tuples
of size n. Returns a new array.
Defined in boot.janet -- 1642 : 1")
("debug/stacktrace" . "FUNCTION
(debug/stacktrace fiber &opt err prefix)

Prints a nice looking stacktrace for a fiber. Can optionally provide an error value to print the stack trace with. If `err` is nil or not provided, and no prefix is given, will skip the error line. Returns the fiber.
Defined in src/core/debug.c -- 366 : 1")
("spit" . "FUNCTION
(spit path contents &opt mode)

Write contents to a file at path.
Can optionally append to the file.
Defined in boot.janet -- 1673 : 1")
("buf<-word" . "FUNCTION
(buffer/push-word buffer & xs)

Append machine words to a buffer. The 4 bytes of the integer are appended in twos complement, little endian order, unsigned for all x. Returns the modified buffer. Will throw an error if the buffer overflows.
Defined in src/core/buffer.c -- 239 : 1")
("log1p" . "FUNCTION
(math/log1p x)

Returns (log base e of x) + 1 more accurately than (+ (math/log x) 1)
Defined in src/core/math.c -- 291 : 1")
("key:" . "FUNCTION
(keyword/slice bytes &opt start end)

Same a string/slice, but returns a keyword.
Defined in src/core/string.c -- 195 : 1")
("letters" . "MACRO
(letters str)


Defined in boot.janet -- 3968 : 1")
("eflush" . "FUNCTION
(eflush)

Flush (dyn :err stderr) if it is a file, otherwise do nothing.
Defined in src/core/io.c -- 706 : 1")
("seq" . "MACRO
(seq head & body)

Similar to loop, but accumulates the loop body into an array and returns that.
See loop for details.
Defined in boot.janet -- 591 : 1")
("bflip" . "FUNCTION
(bit-flip x y)

Flip bits of x
Defined in src/core/math.c -- 372 : 1")
("hypot" . "FUNCTION
(math/hypot a b)

Returns c from the equation c^2 = a^2 + b^2.
Defined in src/core/math.c -- 305 : 1")
("os-perm-int" . "FUNCTION
(os/perm-int bytes)

Parse a 9 character permission string and return an integer that can be used by chmod.
Defined in src/core/os.c -- 1964 : 1")
("parser/status" . "FUNCTION
(parser/status parser)

Gets the current status of the parser state machine. The status will be one of:

* :pending - a value is being parsed.

* :error - a parsing error was encountered.

* :root - the parser can either read more values or safely terminate.
Defined in src/core/parse.c -- 993 : 1")
("partition-by" . "FUNCTION
(partition-by f ind)

Partition elements of a sequential data structure by a representative function `f`. Partitions
split when `(f x)` changes values when iterating to the next element `x` of `ind`. Returns a new array
of arrays.
Defined in boot.janet -- 1559 : 1")
("*current-file*" . "FUNCTION
Bound to the name of the currently compiling file.
Defined in boot.janet -- 1181 : 1")
("struct" . "FUNCTION
(struct & kvs)

Create a new struct from a sequence of key value pairs. kvs is a sequence k1, v1, k2, v2, k3, v3, ... If kvs has an odd number of elements, an error will be thrown. Returns the new struct.
Defined in src/core/corelib.c -- 490 : 1")
("find-index" . "FUNCTION
(find-index pred ind &opt dflt)

Find the index of indexed type for which pred is true. Returns dflt if not found.
Defined in boot.janet -- 1015 : 1")
("dec" . "FUNCTION
(dec x)

Returns x - 1.
Defined in boot.janet -- 144 : 1")
("tab-new" . "FUNCTION
(table/new capacity)

Creates a new empty table with pre-allocated memory for capacity entries. This means that if one knows the number of entries going to go in a table on creation, extra memory allocation can be avoided. Returns the new table.
Defined in src/core/table.c -- 296 : 1")
("buf-fmt" . "FUNCTION
(buffer/format buffer format & args)

Snprintf like functionality for printing values into a buffer. Returns  the modified buffer.
Defined in src/core/buffer.c -- 441 : 1")
("short-fn" . "MACRO
(short-fn arg)

Shorthand for fn. Arguments are given as $n, where n is the 0-indexed
argument of the function. $ is also an alias for the first (index 0) argument.
The $& symbol will make the anonymous function variadic if it appears in the
body of the function - it can be combined with positional arguments.

Example usage:

  * (short-fn (+ $ $)) - A function that doubles its arguments.
  * (short-fn (string $0 $1)) - accepting multiple args
  * |(+ $ $) - use pipe reader macro for terse function literals
  * |(+ $&) - variadic functions
Defined in boot.janet -- 2132 : 1")
("kvs" . "FUNCTION
(kvs dict)

Takes a table or struct and returns and array of key value pairs
like @[k v k v ...]. Returns a new array.
Defined in boot.janet -- 1612 : 1")
("buf-blit" . "FUNCTION
(buffer/blit dest src &opt dest-start src-start src-end)

Insert the contents of src into dest. Can optionally take indices that indicate which part of src to copy into which part of dest. Indices can be negative to index from the end of src or dest. Returns dest.
Defined in src/core/buffer.c -- 400 : 1")
("keys" . "FUNCTION
(keys x)

Get the keys of an associative data structure.
Defined in boot.janet -- 1507 : 1")
("get-in" . "FUNCTION
(get-in ds ks &opt dflt)

Access a value in a nested data structure. Looks into the data structure via
a sequence of keys.
Defined in boot.janet -- 1426 : 1")
("-inf" . "FUNCTION
The number representing negative infinity
Defined in src/core/math.c -- 439 : 1")
("bxor" . "FUNCTION
(bxor & xs)

Returns the bit-wise xor of all values in xs. Each in xs must be an integer.")
("require" . "FUNCTION
(require path & args)

Require a module with the given name. Will search all of the paths in
module/paths. Returns the new environment
returned from compiling and running the file.
Defined in boot.janet -- 2785 : 1")
("int-max" . "FUNCTION
The maximum contiguous integer represtenable by a double (-(2^53))
Defined in src/core/math.c -- 447 : 1")
("compare<=" . "FUNCTION
(compare<= & xs)

Equivalent of `<=` but using polymorphic `compare` instead of primitive comparator.
Defined in boot.janet -- 762 : 1")
("when-let" . "MACRO
(when-let bindings & body)

Same as (if-let bindings (do ;body)).
Defined in boot.janet -- 664 : 1")
("function?" . "FUNCTION
(function? x)

Check if x is a function (not a cfunction).
Defined in boot.janet -- 100 : 1")
("error" . "FUNCTION
(error e)

Throws an error e that can be caught and handled by a parent fiber.")
("if-not" . "MACRO
(if-not condition then &opt else)

Shorthand for (if (not condition) else then).
Defined in boot.janet -- 178 : 1")
("acosh" . "FUNCTION
(math/acosh x)

Returns the hyperbolic arccosine of x.
Defined in src/core/math.c -- 269 : 1")
("xprin" . "FUNCTION
(xprin to & xs)

Print to a file or other value explicitly (no dynamic bindings). The value to print to is the first argument, and is otherwise the same as prin. Returns nil.
Defined in src/core/io.c -- 582 : 1")
("buf//" . "FUNCTION
(buffer/trim buffer)

Set the backing capacity of the buffer to the current length of the buffer. Returns the modified buffer.
Defined in src/core/buffer.c -- 208 : 1")
("hasone?" . "FUNCTION
(hasone? xs)

Check if xs has exactly on element
Defined in boot.janet -- 122 : 1")
("buf-new*" . "FUNCTION
(buffer/new-filled count &opt byte)

Creates a new buffer of length count filled with byte. By default, byte is 0. Returns the new buffer.
Defined in src/core/buffer.c -- 175 : 1")
("sin" . "FUNCTION
(math/sin x)

Returns the sine of x.
Defined in src/core/math.c -- 270 : 1")
("s-/" . "FUNCTION
(string/trimr str &opt set)

Trim trailing whitespace from a byte sequence. If the argument set is provided, consider only characters in set to be whitespace.
Defined in src/core/string.c -- 599 : 1")
("s-join" . "FUNCTION
(string/join parts &opt sep)

Joins an array of strings into one string, optionally separated by a separator string sep.
Defined in src/core/string.c -- 490 : 1")
("deep-not=" . "FUNCTION
(deep-not= x y)

Like not=, but mutable types (arrays, tables, buffers) are considered
equal if they have identical structure. Much slower than not=.
Defined in boot.janet -- 2049 : 1")
("arr-new" . "FUNCTION
(array/new capacity)

Creates a new empty array with a pre-allocated capacity. The same as (array) but can be more efficient if the maximum size of an array is known.
Defined in src/core/array.c -- 125 : 1")
("take-until" . "FUNCTION
(take-until pred ind)

Same as `(take-while (complement pred) ind)`.
Defined in boot.janet -- 1099 : 1")
("compare>=" . "FUNCTION
(compare>= & xs)

Equivalent of `>=` but using polymorphic `compare` instead of primitive comparator.
Defined in boot.janet -- 772 : 1")
("stderr" . "FUNCTION
The standard error file.
Defined in src/core/io.c -- 818 : 1")
("rng-uniform" . "FUNCTION
(math/rng-uniform rng)

Extract a random number in the range [0, 1) from the RNG.
Defined in src/core/math.c -- 142 : 1")
("<=" . "FUNCTION
(<= & xs)

Check if xs is in non-descending order. Returns a boolean.")
("os-link" . "FUNCTION
(os/link oldpath newpath &opt symlink)

Create a link at newpath that points to oldpath and returns nil. Iff symlink is truthy, creates a symlink. Iff symlink is falsey or not provided, creates a hard link. Does not work on Windows.
Defined in src/core/os.c -- 1436 : 1")
("module/loaders" . "FUNCTION
A table of loading method names to loading functions.
This table lets require and import load many different kinds
of files as modules.
Defined in boot.janet -- 2754 : 1")
("-<<" . "MACRO
(-<< x & forms)


Defined in boot.janet -- 3920 : 1")
("fiber/can-resume?" . "FUNCTION
(fiber/can-resume? fiber)

Check if a fiber is finished and cannot be resumed.
Defined in src/core/fiber.c -- 628 : 1")
("run-context" . "FUNCTION
(run-context opts)

Run a context. This evaluates expressions in an environment,
and encapsulates the parsing, compilation, and evaluation.
Returns (in environment :exit-value environment) when complete.
opts is a table or struct of options. The options are as follows:

  * `:chunks` - callback to read into a buffer - default is getline
  * `:on-parse-error` - callback when parsing fails - default is bad-parse
  * `:env` - the environment to compile against - default is the current env
  * `:source` - source path for better errors (use keywords for non-paths) - default is :<anonymous>
  * `:on-compile-error` - callback when compilation fails - default is bad-compile
  * `:on-compile-warning` - callback for any linting error - default is warn-compile
  * `:evaluator` - callback that executes thunks. Signature is (evaluator thunk source env where)
  * `:on-status` - callback when a value is evaluated - default is debug/stacktrace.
  * `:fiber-flags` - what flags to wrap the compilation fiber with. Default is :ia.
  * `:expander` - an optional function that is called on each top level form before being compiled.
  * `:parser` - provide a custom parser that implements the same interface as Janet's built-in parser.
  * `:read` - optional function to get the next form, called like `(read env source)`.
    Overrides all parsing.
Defined in boot.janet -- 2325 : 1")
("s/-" . "FUNCTION
(string/triml str &opt set)

Trim leading whitespace from a byte sequence. If the argument set is provided, consider only characters in set to be whitespace.
Defined in src/core/string.c -- 589 : 1")
("s//" . "FUNCTION
(string/trim str &opt set)

Trim leading and trailing whitespace from a byte sequence. If the argument set is provided, consider only characters in set to be whitespace.
Defined in src/core/string.c -- 576 : 1")
("foldl" . "FUNCTION
(foldl f ind)

The 2-argument version of reduce that does not take an initialization value.
Instead, the first element of the array is used for initialization.
Defined in boot.janet -- 854 : 1")
("comment" . "MACRO
(comment &)

Ignores the body of the comment.
Defined in boot.janet -- 174 : 1")
("janet/config-bits" . "FUNCTION
The flag set of config options from janetconf.h which is used to check if native modules are compatible with the host program.")
("s/>" . "FUNCTION
(string/replace patt subst str)

Replace the first occurrence of patt with subst in the string str. Will return the new string if patt is found, otherwise returns str.
Defined in src/core/string.c -- 389 : 1")
("debug/fbreak" . "FUNCTION
(debug/fbreak fun &opt pc)

Set a breakpoint in a given function. pc is an optional offset, which is in bytecode instructions. fun is a function value. Will throw an error if the offset is too large or negative.
Defined in src/core/debug.c -- 241 : 1")
("with-vars" . "MACRO
(with-vars vars & body)

Evaluates body with each var in vars temporarily bound. Similar signature to
let, but each binding must be a var.
Defined in boot.janet -- 1332 : 1")
("take-while" . "FUNCTION
(take-while pred ind)

Given a predicate, take only elements from a fiber, indexed or bytes type that satisfy
the predicate, and abort on first failure. Returns a new array, tuple or string, respectively.
Defined in boot.janet -- 1107 : 1")
("match" . "MACRO
(match x & cases)

Pattern matching. Match an expression `x` against any number of cases.
Each case is a pattern to match against, followed by an expression to
evaluate to if that case is matched.  Legal patterns are:

* symbol -- a pattern that is a symbol will match anything, binding `x`'s
  value to that symbol.

* array or bracket tuple -- an array or bracket tuple will match only if
  all of its elements match the corresponding elements in `x`.
  Use `& rest` at the end of an array or bracketed tuple to bind all remaining values to `rest`.

* table or struct -- a table or struct will match if all values match with
  the corresponding values in `x`.

* tuple -- a tuple pattern will match if its first element matches, and the
  following elements are treated as predicates and are true.

* `\_` symbol -- the last special case is the `\_` symbol, which is a wildcard
  that will match any value without creating a binding.

While a symbol pattern will ordinarily match any value, the pattern `(@ <sym>)`,
where <sym> is any symbol, will attempt to match `x` against a value
already bound to `<sym>`, rather than matching and rebinding it.

Any other value pattern will only match if it is equal to `x`.
Quoting a pattern with `'` will also treat the value as a literal value to match against.

Defined in boot.janet -- 1699 : 1")
("macex" . "FUNCTION
(macex x &opt on-binding)

Expand macros completely.
on-binding is an optional callback whenever a normal symbolic binding
is encounter. This allows macros to easily see all bindings use by their
arguments by calling macex on their contents. The binding itself is also
replaced by the value returned by on-binding within the expand macro.
Defined in boot.janet -- 2085 : 1")
("make-env" . "FUNCTION
(make-env &opt parent)

Create a new environment table. The new environment
will inherit bindings from the parent environment, but new
bindings will not pollute the parent environment.
Defined in boot.janet -- 2223 : 1")
(">=" . "FUNCTION
(>= & xs)

Check if xs is in non-ascending order. Returns a boolean.")
("sh-run-cmd-do" . "MACRO
(sh-run-cmd-do forms)

Execute multiple programs
Defined in boot.janet -- 4145 : 1")
("doc*" . "FUNCTION
(doc* &opt sym)

Return docstring for symbol
Defined in boot.janet -- 3810 : 1")
("bor" . "FUNCTION
(bor & xs)

Returns the bit-wise or of all values in xs. Each x in xs must be an integer.")
("tracev" . "MACRO
(tracev x)

Print a value and a description of the form that produced that value to
stderr. Evaluates to x.
Defined in boot.janet -- 1184 : 1")
("s-bytes" . "FUNCTION
(string/bytes str)

Returns a tuple of integers that are the byte values of the string.
Defined in src/core/string.c -- 221 : 1")
("table" . "FUNCTION
(table & kvs)

Creates a new table from a variadic number of keys and values. kvs is a sequence k1, v1, k2, v2, k3, v3, ... If kvs has an odd number of elements, an error will be thrown. Returns the new table.
Defined in src/core/corelib.c -- 455 : 1")
("number?" . "FUNCTION
(number? x)

Check if x is a number.
Defined in boot.janet -- 94 : 1")
("->>" . "MACRO
(->> x & forms)


Defined in boot.janet -- 3890 : 1")
("parser/clone" . "FUNCTION
(parser/clone p)

Creates a deep clone of a parser that is identical to the input parser. This cloned parser can be used to continue parsing from a good checkpoint if parsing later fails. Returns a new parser.
Defined in src/core/parse.c -- 1250 : 1")
("json-encode" . "FUNCTION
(string/trim str &opt set)

Trim leading and trailing whitespace from a byte sequence. If the argument set is provided, consider only characters in set to be whitespace.
Defined in src/core/string.c -- 1165 : 1")
("index-of" . "FUNCTION
(index-of x ind &opt dflt)

Find the first key associated with a value x in a data structure, acting like a reverse lookup.
Will not look at table prototypes.
Returns dflt if not found.
Defined in boot.janet -- 1044 : 1")
("as?->" . "MACRO
(as?-> x as & forms)

Thread forms together, replacing as in forms with the value
of the previous form. The first for is the value x. If any
intermediate values are falsey, return nil; otherwise, returns the
last value.
Defined in boot.janet -- 1308 : 1")
("compif" . "MACRO
(compif cnd tru &opt fals)

Check the condition cnd at compile time - if truthy, compile tru, else compile fals.
Defined in boot.janet -- 2556 : 1")
("compwhen" . "MACRO
(compwhen cnd & body)

Check the condition cnd at compile time - if truthy, compile (upscope ;body), else compile nil.
Defined in boot.janet -- 2563 : 1")
("atan" . "FUNCTION
(math/atan x)

Returns the arctangent of x.
Defined in src/core/math.c -- 266 : 1")
("snd" . "FUNCTION
(snd ds)

Gets the second element of DS
Defined in boot.janet -- 3882 : 1")
("-?>" . "MACRO
(-?> x & forms)

Short circuit threading macro. Inserts x as the second value in the first form
in forms, and inserts the modified first form into the second form
in the same manner, and so on. The pipeline will return nil
if an intermediate value is nil.
Useful for expressing pipelines of data.
Defined in boot.janet -- 1226 : 1")
("os-umask" . "FUNCTION
(os/umask mask)

Set a new umask, returns the old umask.
Defined in src/core/os.c -- 1868 : 1")
("module/loading" . "FUNCTION
Table mapping currently loading modules to true. Used to prevent
circular dependencies.
Defined in boot.janet -- 2678 : 1")
("buf-new" . "FUNCTION
(buffer/new capacity)

Creates a new, empty buffer with enough backing memory for capacity bytes. Returns a new buffer of length 0.
Defined in src/core/buffer.c -- 165 : 1")
("with-syms" . "MACRO
(with-syms syms & body)

Evaluates body with each symbol in syms bound to a generated, unique symbol.
Defined in boot.janet -- 306 : 1")
("extreme" . "FUNCTION
(extreme order args)

Returns the most extreme value in args based on the function order.
order should take two values and return true or false (a comparison).
Returns nil if args is empty.
Defined in boot.janet -- 693 : 1")
("comptime" . "MACRO
(comptime x)

Evals x at compile time and returns the result. Similar to a top level unquote.
Defined in boot.janet -- 2551 : 1")
("length" . "FUNCTION
(length ds)

Returns the length or count of a data structure in constant time as an integer. For structs and tables, returns the number of key-value pairs in the data structure.")
("hash" . "FUNCTION
(hash value)

Gets a hash for any value. The hash is an integer can be used as a cheap hash function for all values. If two values are strictly equal, then they will have the same hash value.
Defined in src/core/corelib.c -- 579 : 1")
("parser/error" . "FUNCTION
(parser/error parser)

If the parser is in the error state, returns the message associated with that error. Otherwise, returns nil. Also flushes the parser state and parser queue, so be sure to handle everything in the queue before calling parser/error.
Defined in src/core/parse.c -- 1020 : 1")
("os-exit" . "FUNCTION
(os/exit &opt x)

Exit from janet with an exit code equal to x. If x is not an integer, the exit with status equal the hash of x.
Defined in src/core/os.c -- 186 : 1")
("debug/step" . "FUNCTION
(debug/step fiber &opt x)

Run a fiber for one virtual instruction of the Janet machine. Can optionally pass in a value that will be passed as the resuming value. Returns the signal value, which will usually be nil, as breakpoints raise nil signals.
Defined in src/core/debug.c -- 392 : 1")
("tab-proto-flatten" . "FUNCTION
(table/proto-flatten tab)

Create a new table that is the result of merging all prototypes into a new table.
Defined in src/core/table.c -- 368 : 1")
("merge-into" . "FUNCTION
(merge-into tab & colls)

Merges multiple tables/structs into a table. If a key appears in more than one  collection, then later values replace any previous ones.  Returns the original table.
Defined in boot.janet -- 1486 : 1")
("debug/break" . "FUNCTION
(debug/break source line col)

Sets a breakpoint in `source` at a given line and column. Will throw an error if the breakpoint location cannot be found. For example

	(debug/break \"core.janet\" 10 4)

will set a breakpoint at line 10, 4th column of the file core.janet.
Defined in src/core/debug.c -- 215 : 1")
("int-min" . "FUNCTION
The minimum contiguous integer representable by a double (2^53)
Defined in src/core/math.c -- 445 : 1")
("parser/state" . "FUNCTION
(parser/state parser &opt key)

Returns a representation of the internal state of the parser. If a key is passed, only that information about the state is returned. Allowed keys are:

* :delimiters - Each byte in the string represents a nested data structure. For example, if the parser state is '([\"', then the parser is in the middle of parsing a string inside of square brackets inside parentheses. Can be used to augment a REPL prompt.

* :frames - Each table in the array represents a 'frame' in the parser state. Frames contain information about the start of the expression being parsed as well as the type of that expression and some type-specific information.
Defined in src/core/parse.c -- 1213 : 1")
("array?" . "FUNCTION
(array? x)

Check if x is an array.
Defined in boot.janet -- 105 : 1")
("buf-bit-set" . "FUNCTION
(buffer/bit-set buffer index)

Sets the bit at the given bit-index. Returns the buffer.
Defined in src/core/buffer.c -- 357 : 1")
("gamma" . "FUNCTION
(math/gamma x)

Returns gamma(x).
Defined in src/core/math.c -- 289 : 1")
("debug/unfbreak" . "FUNCTION
(debug/unfbreak fun &opt pc)

Unset a breakpoint set with debug/fbreak.
Defined in src/core/debug.c -- 253 : 1")
("janet/version" . "FUNCTION
The version number of the running janet program.")
("struct/getproto" . "FUNCTION
(struct/getproto st)

Return the prototype of a struct, or nil if it doesn't have one.
Defined in src/core/struct.c -- 223 : 1")
("args" . "FUNCTION
")
("empty?" . "FUNCTION
(empty? xs)

Check if xs is empty.
Defined in boot.janet -- 121 : 1")
("postwalk" . "FUNCTION
(postwalk f form)

Do a post-order traversal of a data structure and call (f x)
on every visitation.
Defined in boot.janet -- 1285 : 1")
("doc" . "MACRO
(doc &opt sym)

Shows documentation for the given symbol, or can show a list of available bindings.
If `sym` is a symbol, will look for documentation for that symbol. If `sym` is a string
or is not provided, will show all lexical and dynamic bindings in the current environment
containing that string (all bindings will be shown if no string is given).
Defined in boot.janet -- 3206 : 1")
("bad-compile" . "FUNCTION
(bad-compile msg macrof where &opt line col)

Default handler for a compile error.
Defined in boot.janet -- 2290 : 1")
("sh-run" . "FUNCTION
(sh-run & args)

Run as shell command. Prints output, returns stat
Defined in boot.janet -- 4116 : 1")
("struct/proto-flatten" . "FUNCTION
(struct/proto-flatten st)

Convert a struct with prototypes to a struct with no prototypes by merging all key value pairs from recursive prototypes into one new struct.
Defined in src/core/struct.c -- 233 : 1")
("defmacro-" . "MACRO
(defmacro- name & more)

Define a private macro that will not be exported.
Defined in boot.janet -- 58 : 1")
("sorted" . "FUNCTION
(sorted ind &opt before?)

Returns a new sorted array without modifying the old one.
If a `before?` comparator function is provided, sorts elements using that,
otherwise uses `<`.
Defined in boot.janet -- 829 : 1")
("all-bindings" . "FUNCTION
(all-bindings &opt env local)

Get all symbols available in an environment. Defaults to the current
fiber's environment. If local is truthy, will not show inherited bindings
(from prototype tables).
Defined in boot.janet -- 2857 : 1")
("dictionary?" . "FUNCTION
(dictionary? x)

Check if x is a table or struct.
Defined in boot.janet -- 111 : 1")
("all-dynamics" . "FUNCTION
(all-dynamics &opt env local)

Get all dynamic bindings in an environment. Defaults to the current
fiber's environment. If local is truthy, will not show inherited bindings
(from prototype tables).
Defined in boot.janet -- 2864 : 1")
("describe" . "FUNCTION
(describe x)

Returns a string that is a human-readable description of `x`. For recursive data structures, the string returned contains a pointer value from which the identity of `x` can be determined.
Defined in src/core/corelib.c -- 340 : 1")
("default-peg-grammar" . "FUNCTION
The default grammar used for pegs. This grammar defines several common patterns
that should make it easier to write more complex patterns.
Defined in boot.janet -- 2181 : 1")
("expm1" . "FUNCTION
(math/expm1 x)

Returns e to the power of x minus 1.
Defined in src/core/math.c -- 278 : 1")
("doc-of" . "FUNCTION
(doc-of x)

Searches all loaded modules in module/cache for a given binding and prints out its documentation.
This does a search by value instead of by name. Returns nil.
Defined in boot.janet -- 3214 : 1")
("tab-setproto" . "FUNCTION
(table/setproto tab proto)

Set the prototype of a table. Returns the original table tab.
Defined in src/core/table.c -- 318 : 1")
("const" . "MACRO
(const f)


Defined in boot.janet -- 3859 : 1")
("bad-parse" . "FUNCTION
(bad-parse p where)

Default handler for a parse error.
Defined in boot.janet -- 2235 : 1")
("gensym" . "FUNCTION
(gensym)

Returns a new symbol that is unique across the runtime. This means it will not collide with any already created symbols during compilation, so it can be used in macros to generate automatic bindings.
Defined in src/core/corelib.c -- 507 : 1")
("tup-brackets" . "FUNCTION
(tuple/brackets & xs)

Creates a new bracketed tuple containing the elements xs.
Defined in src/core/tuple.c -- 58 : 1")
("buffer" . "FUNCTION
(buffer & xs)

Creates a buffer by concatenating the elements of `xs` together. If an element is not a byte sequence, it is converted to bytes via `describe`. Returns the new buffer.
Defined in src/core/corelib.c -- 385 : 1")
("varglobal" . "FUNCTION
(varglobal name init)

Dynamically create a global var.
Defined in boot.janet -- 85 : 1")
("os-proc-kill" . "FUNCTION
(os/proc-kill proc &opt wait)

Kill a subprocess by sending SIGKILL to it on posix systems, or by closing the process handle on windows. If wait is truthy, will wait for the process to finish and returns the exit code. Otherwise, returns proc.
Defined in src/core/os.c -- 550 : 1")
("*err*" . "FUNCTION
Where error printing prints output to.
Defined in boot.janet -- 1176 : 1")
("zero?" . "FUNCTION
(zero? x)

Check if x is zero.
Defined in boot.janet -- 777 : 1")
("fiber/new" . "FUNCTION
(fiber/new func &opt sigmask)

Create a new fiber with function body func. Can optionally take a set of signals to block from the current parent fiber when called. The mask is specified as a keyword where each character is used to indicate a signal to block. If the ev module is enabled, and this fiber is used as an argument to `ev/go`, these \"blocked\" signals will result in messages being sent to the supervisor channel. The default sigmask is :y. For example,

    (fiber/new myfun :e123)

blocks error signals and user signals 1, 2 and 3. The signals are as follows:

* :a - block all signals
* :d - block debug signals
* :e - block error signals
* :t - block termination signals: error + user[0-4]
* :u - block user signals
* :y - block yield signals
* :0-9 - block a specific user signal

The sigmask argument also can take environment flags. If any mutually exclusive flags are present, the last flag takes precedence.

* :i - inherit the environment from the current fiber
* :p - the environment table's prototype is the current environment table
Defined in src/core/fiber.c -- 479 : 1")
("floor" . "FUNCTION
(math/floor x)

Returns the largest integer value number that is not greater than x.
Defined in src/core/math.c -- 286 : 1")
("find" . "FUNCTION
(find pred ind &opt dflt)

Find the first value in an indexed collection that satisfies a predicate. Returns
dflt if not found.
Defined in boot.janet -- 1029 : 1")
("os-perm-string" . "FUNCTION
(os/perm-string int)

Convert a Unix octal permission value from a permission integer as returned by os/stat to a human readable string, that follows the formatting of unix tools like ls. Returns the string as a 9 character string of r, w, x and - characters. Does not include the file/directory/symlink character as rendered by `ls`.
Defined in src/core/os.c -- 1954 : 1")
("module/add-paths" . "FUNCTION
(module/add-paths ext loader)

Add paths to `module/paths` for a given loader such that
the generated paths behave like other module types, including
relative imports and syspath imports. `ext` is the file extension
to associate with this module type, including the dot. `loader` is the
keyword name of a loader in `module/loaders`. Returns the modified `module/paths`.
Defined in boot.janet -- 2604 : 1")
("debug/stack" . "FUNCTION
(debug/stack fib)

Gets information about the stack as an array of tables. Each table in the array contains information about a stack frame. The top-most, current stack frame is the first table in the array, and the bottom-most stack frame is the last value. Each stack frame contains some of the following attributes:

* :c - true if the stack frame is a c function invocation

* :source-column - the current source column of the stack frame

* :function - the function that the stack frame represents

* :source-line - the current source line of the stack frame

* :name - the human-friendly name of the function

* :pc - integer indicating the location of the program counter

* :source - string with the file path or other identifier for the source code

* :slots - array of all values in each slot

* :tail - boolean indicating a tail call
Defined in src/core/debug.c -- 336 : 1")
("juxt*" . "FUNCTION
(juxt* & funs)

Returns the juxtaposition of functions. In other words,
((juxt* a b c) x) evaluates to [(a x) (b x) (c x)].
Defined in boot.janet -- 1141 : 1")
("lcm" . "FUNCTION
(math/lcm x y)

Returns the least common multiple of x and y.
Defined in src/core/math.c -- 342 : 1")
("s-break" . "FUNCTION
(s-break x str)

partition STR at index X
Defined in boot.janet -- 3988 : 1")
("list-replace" . "FUNCTION
(list-replace pred to-func form & flat)

Replace all elements of a tuple. PRED is a predicate that if tdecides to replace the element. TO-FUNC is a function that returns what to replacethe element with. Both functions take a single argument, the element.
Defined in boot.janet -- 4045 : 1")
("fiber?" . "FUNCTION
(fiber? x)

Check if x is a fiber.
Defined in boot.janet -- 95 : 1")
("for" . "MACRO
(for i start stop & body)

Do a C-style for-loop for side effects. Returns nil.
Defined in boot.janet -- 503 : 1")
("first" . "FUNCTION
(first xs)

Get the first element from an indexed data structure.
Defined in boot.janet -- 718 : 1")
("walk" . "FUNCTION
(walk f form)

Iterate over the values in ast and apply f
to them. Collect the results in a data structure. If ast is not a
table, struct, array, or tuple,
returns form.
Defined in boot.janet -- 1269 : 1")
("each" . "MACRO
(each x ds & body)

Loop over each value in ds. Returns nil.
Defined in boot.janet -- 529 : 1")
("fiber/maxstack" . "FUNCTION
(fiber/maxstack fib)

Gets the maximum stack size in janet values allowed for a fiber. While memory for the fiber's stack is not allocated up front, the fiber will not allocated more than this amount and will throw a stack-overflow error if more memory is needed. 
Defined in src/core/fiber.c -- 604 : 1")
("file-seek" . "FUNCTION
(file/seek f &opt whence n)

Jump to a relative location in the file `f`. `whence` must be one of:

* :cur - jump relative to the current file location

* :set - jump relative to the beginning of the file

* :end - jump relative to the end of the file

By default, `whence` is :cur. Optionally a value `n` may be passed for the relative number of bytes to seek in the file. `n` may be a real number to handle large files of more than 4GB. Returns the file handle.
Defined in src/core/io.c -- 362 : 1")
("sum" . "FUNCTION
(sum xs)

Returns the sum of xs. If xs is empty, returns 0.
Defined in boot.janet -- 614 : 1")
("flatten-into" . "FUNCTION
(flatten-into into xs)

Takes a nested array (tree), and appends the depth first traversal of
that array to an array 'into'. Returns array into.
Defined in boot.janet -- 1596 : 1")
("unless" . "MACRO
(unless condition & body)

Shorthand for (when (not condition) ;body). 
Defined in boot.janet -- 188 : 1")
("fiber/root" . "FUNCTION
(fiber/root)

Returns the current root fiber. The root fiber is the oldest ancestor that does not have a parent.
Defined in src/core/fiber.c -- 595 : 1")
("load-image-dict" . "FUNCTION
A table used in combination with unmarshal to unmarshal byte sequences created
by make-image, such that (load-image bytes) is the same as (unmarshal bytes load-image-dict).
Defined in boot.janet -- 2541 : 1")
("buf<-" . "FUNCTION
(buffer/push buffer & xs)

Push both individual bytes and byte sequences to a buffer. For each x in xs, push the byte if x is an integer, otherwise push the bytesequence to the buffer. Thus, this function behaves like both `buffer/push-string` and `buffer/push-byte`. Returns the modified buffer. Will throw an error if the buffer overflows.
Defined in src/core/buffer.c -- 277 : 1")
("buf*" . "FUNCTION
(buffer/fill buffer &opt byte)

Fill up a buffer with bytes, defaulting to 0s. Does not change the buffer's length. Returns the modified buffer.
Defined in src/core/buffer.c -- 192 : 1")
("gccollect" . "FUNCTION
(gccollect)

Run garbage collection. You should probably not call this manually.
Defined in src/core/corelib.c -- 517 : 1")
("printf" . "FUNCTION
(printf fmt & xs)

Prints output formatted as if with (string/format fmt ;xs) to (dyn :out stdout) with a trailing newline.
Defined in src/core/io.c -- 641 : 1")
("file-each-line" . "MACRO
(file-each-line file & forms)

Execute forms on each line of file. variableline contains line as string.
Defined in boot.janet -- 4035 : 1")
("buf:" . "FUNCTION
(buffer/slice bytes &opt start end)

Takes a slice of a byte sequence from start to end. The range is half open, [start, end). Indexes can also be negative, indicating indexing from the end of the end of the array. By default, start is 0 and end is the length of the buffer. Returns a new buffer.
Defined in src/core/buffer.c -- 328 : 1")
("idempotent?" . "FUNCTION
(idempotent? x)

Check if x is a value that evaluates to itself when compiled.
Defined in boot.janet -- 127 : 1")
("lines" . "MACRO
(lines str)

Split string by 

Defined in boot.janet -- 3957 : 1")
("nan" . "FUNCTION
Not a number (IEEE-754 NaN)
Defined in src/core/math.c -- 450 : 1")
("defglobal" . "FUNCTION
(defglobal name value)

Dynamically create a global def.
Defined in boot.janet -- 78 : 1")
("accumulate" . "FUNCTION
(accumulate f init ind)

Similar to reduce, but accumulates intermediate values into an array.
The last element in the array is what would be the return value from reduce.
The init value is not added to the array (the return value will have the same
number of elements as ind).
Returns a new array.
Defined in boot.janet -- 867 : 1")
("let" . "MACRO
(let bindings & body)

Create a scope and bind values to symbols. Each pair in bindings is
assigned as if with def, and the body of the let form returns the last
value.
Defined in boot.janet -- 228 : 1")
("tuple?" . "FUNCTION
(tuple? x)

Check if x is a tuple.
Defined in boot.janet -- 106 : 1")
("s:>" . "MACRO
(s:> str find)

Slice STR from beginning until FIND
Defined in boot.janet -- 3942 : 1")
("even?" . "FUNCTION
(even? x)

Check if x is even.
Defined in boot.janet -- 781 : 1")
("use" . "MACRO
(use & modules)

Similar to import, but imported bindings are not prefixed with a module
identifier. Can also import multiple modules in one shot.
Defined in boot.janet -- 2833 : 1")
("tup-setmap" . "FUNCTION
(tuple/setmap tup line column)

Set the sourcemap metadata on a tuple. line and column indicate should be integers.
Defined in src/core/tuple.c -- 108 : 1")
("os-environ" . "FUNCTION
(os/environ)

Get a copy of the os environment table.
Defined in src/core/os.c -- 1118 : 1")
("*pretty-format*" . "FUNCTION
Format specifier for the `pp` function
Defined in boot.janet -- 1684 : 1")
("tup:" . "FUNCTION
(tuple/slice arrtup [,start=0 [,end=(length arrtup)]])

Take a sub sequence of an array or tuple from index start inclusive to index end exclusive. If start or end are not provided, they default to 0 and the length of arrtup respectively. 'start' and 'end' can also be negative to indicate indexing from the end of the input. Note that index -1 is synonymous with index '(length arrtup)' to allow a full negative slice range. Returns the new tuple.
Defined in src/core/tuple.c -- 66 : 1")
("slurp" . "FUNCTION
(slurp path)

Read all data from a file with name path
and then close the file.
Defined in boot.janet -- 1663 : 1")
("buf_" . "FUNCTION
(buffer/clear buffer)

Sets the size of a buffer to 0 and empties it. The buffer retains its memory so it can be efficiently refilled. Returns the modified buffer.
Defined in src/core/buffer.c -- 303 : 1")
("zipcoll" . "FUNCTION
(zipcoll ks vs)

Creates a table from two arrays/tuples.
Returns a new table.
Defined in boot.janet -- 1411 : 1")
("from-pairs" . "FUNCTION
(from-pairs ps)

Takes a sequence of pairs and creates a table from each pair. The inverse of
`pairs` on a table.
Defined in boot.janet -- 1620 : 1")
("os-shell" . "FUNCTION
(os/shell str)

Pass a command string str directly to the system shell.
Defined in src/core/os.c -- 1099 : 1")
("fiber/setenv" . "FUNCTION
(fiber/setenv fiber table)

Sets the environment table for a fiber. Set to nil to remove the current environment.
Defined in src/core/fiber.c -- 465 : 1")
("range" . "FUNCTION
(range & args)

Create an array of values [start, end) with a given step.
With one argument returns a range [0, end). With two arguments, returns
a range [start, end). With three, returns a range with optional step size.
Defined in boot.janet -- 991 : 1")
("merge" . "FUNCTION
(merge & colls)

Merges multiple tables/structs to one. If a key appears in more than one
collection, then later values replace any previous ones.
Returns a new table.
Defined in boot.janet -- 1496 : 1")
("*doc-color*" . "FUNCTION
Whether or not to colorize documentation printed with `doc-format`.
Defined in boot.janet -- 2874 : 1")
("disasm" . "FUNCTION
(disasm func &opt field)

Returns assembly that could be used to compile the given function. func must be a function, not a c function. Will throw on error on a badly typed argument. If given a field name, will only return that part of the function assembly. Possible fields are:

* :arity - number of required and optional arguments.
* :min-arity - minimum number of arguments function can be called with.
* :max-arity - maximum number of arguments function can be called with.
* :vararg - true if function can take a variable number of arguments.
* :bytecode - array of parsed bytecode instructions. Each instruction is a tuple.
* :source - name of source file that this function was compiled from.
* :name - name of function.
* :slotcount - how many virtual registers, or slots, this function uses. Corresponds to stack space used by function.
* :constants - an array of constants referenced by this function.
* :sourcemap - a mapping of each bytecode instruction to a line and column in the source file.
* :environments - an internal mapping of which enclosing functions are referenced for bindings.
* :defs - other function definitions that this function may instantiate.

Defined in src/core/asm.c -- 960 : 1")
("arr!" . "FUNCTION
(array/insert arr at & xs)

Insert all `xs` into array `arr` at index `at`. `at` should be an integer between 0 and the length of the array. A negative value for `at` will index backwards from the end of the array, such that inserting at -1 appends to the array. Returns the array.
Defined in src/core/array.c -- 258 : 1")
("any?" . "FUNCTION
(any? ind)

Returns the first truthy value in ind, otherwise nil.
falsey value.
Defined in boot.janet -- 1365 : 1")
("fst" . "FUNCTION
(fst ds)

Gets the first element of DS
Defined in boot.janet -- 3877 : 1")
("gcinterval" . "FUNCTION
(gcinterval)

Returns the integer number of bytes to allocate before running an iteration of garbage collection.
Defined in src/core/corelib.c -- 543 : 1")
("arr*" . "FUNCTION
(array/fill arr &opt value)

Replace all elements of an array with `value` (defaulting to nil) without changing the length of the array. Returns the modified array.
Defined in src/core/array.c -- 149 : 1")
("arr+" . "FUNCTION
(array/concat arr & parts)

Concatenates a variable number of arrays (and tuples) into the first argument, which must be an array. If any of the parts are arrays or tuples, their elements will be inserted into the array. Otherwise, each part in `parts` will be appended to `arr` in order. Return the modified array `arr`.
Defined in src/core/array.c -- 225 : 1")
("arr-" . "FUNCTION
(array/remove arr at &opt n)

Remove up to `n` elements starting at index `at` in array `arr`. `at` can index from the end of the array with a negative index, and `n` must be a non-negative integer. By default, `n` is 1. Returns the array.
Defined in src/core/array.c -- 289 : 1")
("parser/byte" . "FUNCTION
(parser/byte parser b)

Input a single byte into the parser byte stream. Returns the parser.
Defined in src/core/parse.c -- 983 : 1")
("peg-compile" . "FUNCTION
(peg/compile peg)

Compiles a peg source data structure into a <core/peg>. This will speed up matching if the same peg will be used multiple times. Will also use `(dyn :peg-grammar)` to suppliment the grammar of the peg for otherwise undefined peg keywords.
Defined in src/core/peg.c -- 1601 : 1")
("odd?" . "FUNCTION
(odd? x)

Check if x is odd.
Defined in boot.janet -- 782 : 1")
("reduce" . "FUNCTION
(reduce f init ind)

Reduce, also know as fold-left in many languages, transforms
an indexed type (array, tuple) with a function to produce a value by applying f to
each element in order. f is a function of 2 arguments, (f accum el), where
accum is the initial value and el is the next value in the indexed type ind.
f returns a value that will be used as accum in the next call to f. reduce
returns the value of the final call to f.
Defined in boot.janet -- 842 : 1")
("arr:" . "FUNCTION
(array/slice arrtup &opt start end)

Takes a slice of array or tuple from `start` to `end`. The range is half open, [start, end). Indexes can also be negative, indicating indexing from the end of the array. By default, `start` is 0 and `end` is the length of the array. Note that index -1 is synonymous with index `(length arrtup)` to allow a full negative slice range. Returns a new array.
Defined in src/core/array.c -- 209 : 1")
("return" . "FUNCTION
(return to &opt value)

Return to a prompt point.
Defined in boot.janet -- 370 : 1")
("acos" . "FUNCTION
(math/acos x)

Returns the arccosize of x.
Defined in src/core/math.c -- 264 : 1")
("defer" . "MACRO
(defer form & body)

Run form unconditionally after body, even if the body throws an error.
Will also run form if a user signal 0-4 is received.
Defined in boot.janet -- 317 : 1")
("*out*" . "FUNCTION
Where normal print functions print output to.
Defined in boot.janet -- 1175 : 1")
("os-cd" . "FUNCTION
(os/cd path)

Change current directory to path. Returns nil on success, errors on failure.
Defined in src/core/os.c -- 1508 : 1")
("s-in?" . "MACRO
(s-in? patt str)


Defined in boot.janet -- 3938 : 1")
("s>*" . "FUNCTION
(string/find-all patt str &opt start-index)

Searches for all instances of pattern patt in string str. Returns an array of all indices of found patterns. Overlapping instances of the pattern are counted individually, meaning a byte in str may contribute to multiple found patterns.
Defined in src/core/string.c -- 350 : 1")
("nan?" . "FUNCTION
(nan? x)

Check if x is NaN
Defined in boot.janet -- 93 : 1")
("erfc" . "FUNCTION
(math/erfc x)

Returns the complementary error function of x.
Defined in src/core/math.c -- 293 : 1")
("os-realpath" . "FUNCTION
(os/realpath path)

Get the absolute path for a given path, following ../, ./, and symlinks. Returns an absolute path as a string. Will raise an error on Windows.
Defined in src/core/os.c -- 1933 : 1")
("arr_" . "FUNCTION
(array/clear arr)

Empties an array, setting it's count to 0 but does not free the backing capacity. Returns the modified array.
Defined in src/core/array.c -- 341 : 1")
("dyn" . "FUNCTION
(dyn key &opt default)

Get a dynamic binding. Returns the default value (or nil) if no binding found.
Defined in src/core/corelib.c -- 287 : 1")
("unmarshal" . "FUNCTION
(unmarshal buffer &opt lookup)

Unmarshal a value from a buffer. An optional lookup table can be provided to allow for aliases to be resolved. Returns the value unmarshalled from the buffer.
Defined in src/core/marsh.c -- 1496 : 1")
("s>:" . "MACRO
(s>: str find)

Slice STR from FIND until end
Defined in boot.janet -- 3947 : 1")
("sinh" . "FUNCTION
(math/sinh x)

Returns the hyperbolic sine of x.
Defined in src/core/math.c -- 271 : 1")
("abstract?" . "FUNCTION
(abstract? x)

Check if x is an abstract type.
Defined in src/core/corelib.c -- 396 : 1")
("last" . "FUNCTION
(last xs)

Get the last element from an indexed data structure.
Defined in boot.janet -- 723 : 1")
("file-write" . "FUNCTION
(file/write f bytes)

Writes to a file. 'bytes' must be string, buffer, or symbol. Returns the file.
Defined in src/core/io.c -- 257 : 1")
("neg?" . "FUNCTION
(neg? x)

Check if x is less than 0.
Defined in boot.janet -- 779 : 1")
("s<->" . "FUNCTION
(string/reverse str)

Returns a string that is the reversed version of str.
Defined in src/core/string.c -- 285 : 1")
("gcsetinterval" . "FUNCTION
(gcsetinterval interval)

Set an integer number of bytes to allocate before running garbage collection. Low values for interval will be slower but use less memory. High values will be faster but use more memory.
Defined in src/core/corelib.c -- 526 : 1")
("fiber/getenv" . "FUNCTION
(fiber/getenv fiber)

Gets the environment for a fiber. Returns nil if no such table is set yet.
Defined in src/core/fiber.c -- 454 : 1")
("repeat" . "MACRO
(repeat n & body)

Evaluate body n times. If n is negative, body will be evaluated 0 times. Evaluates to nil.
Defined in boot.janet -- 518 : 1")
("keyword?" . "FUNCTION
(keyword? x)

Check if x is a keyword.
Defined in boot.janet -- 98 : 1")
("table?" . "FUNCTION
(table? x)

Check if x a table.
Defined in boot.janet -- 103 : 1")
("struct/to-table" . "FUNCTION
(struct/to-table st &opt recursive)

Convert a struct to a table. If recursive is true, also convert the table's prototypes into the new struct's prototypes as well.
Defined in src/core/struct.c -- 266 : 1")
("file-flush" . "FUNCTION
(file/flush f)

Flush any buffered bytes to the file system. In most files, writes are buffered for efficiency reasons. Returns the file handle.
Defined in src/core/io.c -- 283 : 1")
("words" . "FUNCTION
(words str)

Split string by any amount of spaces
Defined in boot.janet -- 3962 : 1")
("debug/arg-stack" . "FUNCTION
(debug/arg-stack fiber)

Gets all values currently on the fiber's argument stack. Normally, this should be empty unless the fiber signals while pushing arguments to make a function call. Returns a new array.
Defined in src/core/debug.c -- 379 : 1")
("eprintf" . "FUNCTION
(eprintf fmt & xs)

Prints output formatted as if with (string/format fmt ;xs) to (dyn :err stderr) with a trailing newline.
Defined in src/core/io.c -- 653 : 1")
("os-setenv" . "FUNCTION
(os/setenv variable value)

Set an environment variable.
Defined in src/core/os.c -- 1165 : 1")
("default" . "MACRO
(default sym val)

Define a default value for an optional argument.
Expands to (def sym (if (= nil sym) val sym))
Defined in boot.janet -- 168 : 1")
("is-len?" . "FUNCTION
(is-len? coll len)

Checks if COLL is LEN
Defined in boot.janet -- 3862 : 1")
("os-sleep" . "FUNCTION
(os/sleep n)

Suspend the program for n seconds. 'nsec' can be a real number. Returns nil.
Defined in src/core/os.c -- 1210 : 1")
("syspath" . "FUNCTION
")
("brshift" . "FUNCTION
(brshift x & shifts)

Returns the value of x bit shifted right by the sum of all values in shifts. x and each element in shift must be an integer.")
("abs" . "FUNCTION
(math/fabs x)

Return the absolute value of x.
Defined in src/core/math.c -- 285 : 1")
("os-mktime" . "FUNCTION
(os/mktime date-struct &opt local)

Get the broken down date-struct time expressed as the number  of seconds since January 1, 1970, the Unix epoch. Returns a real number. Date is given in UTC unless local is truthy, in which case the date is computed for the local timezone.

Inverse function to os/date.
Defined in src/core/os.c -- 1383 : 1")
("ceil" . "FUNCTION
(math/ceil x)

Returns the smallest integer value number that is not less than x.
Defined in src/core/math.c -- 284 : 1")
("sh-run-cmd" . "FUNCTION
(sh-run-cmd & args)

Execute program. Returns output string.
Defined in boot.janet -- 4131 : 1")
("awk-dispatch" . "MACRO
(awk-dispatch code rawline)


Defined in boot.janet -- 4060 : 1")
("os-execute" . "FUNCTION
(os/execute args &opt flags env)

Execute a program on the system and pass it string arguments. `flags` is a keyword that modifies how the program will execute.
* :e - enables passing an environment to the program. Without :e, the current environment is inherited.
* :p - allows searching the current PATH for the binary to execute. Without this flag, binaries must use absolute paths.
* :x - raise error if exit code is non-zero.
* :d - Don't try and terminate the process on garbage collection (allow spawning zombies).
`env` is a table or struct mapping environment variables to values. It can also contain the keys :in, :out, and :err, which allow redirecting stdio in the subprocess. These arguments should be core/file values. One can also pass in the :pipe keyword for these arguments to create files that will read (for :err and :out) or write (for :in) to the file descriptor of the subprocess. This is only useful in `os/spawn`, which takes the same parameters as `os/execute`, but will return an object that contains references to these files via (return-value :in), (return-value :out), and (return-value :err). Returns the exit status of the program.
Defined in src/core/os.c -- 1053 : 1")
("compare<" . "FUNCTION
(compare< & xs)

Equivalent of `<` but using polymorphic `compare` instead of primitive comparator.
Defined in boot.janet -- 757 : 1")
("compare=" . "FUNCTION
(compare= & xs)

Equivalent of `=` but using polymorphic `compare` instead of primitive comparator.
Defined in boot.janet -- 752 : 1")
("compare>" . "FUNCTION
(compare> & xs)

Equivalent of `>` but using polymorphic `compare` instead of primitive comparator.
Defined in boot.janet -- 767 : 1")
("buf-popn" . "FUNCTION
(buffer/popn buffer n)

Removes the last n bytes from the buffer. Returns the modified buffer.
Defined in src/core/buffer.c -- 313 : 1")
("eval" . "FUNCTION
(eval form)

Evaluates a form in the current environment. If more control over the
environment is needed, use `run-context`.
Defined in boot.janet -- 2519 : 1")
("os-rmdir" . "FUNCTION
(os/rmdir path)

Delete a directory. The directory must be empty to succeed.
Defined in src/core/os.c -- 1494 : 1")
("*executable*" . "FUNCTION
Name of the interpreter executable used to execute this program. Corresponds to argv[0] in the call to   int main(int argc, char **argv);
Defined in boot.janet -- 3628 : 1")
("reverse" . "FUNCTION
(reverse t)

Reverses the order of the elements in a given array or tuple and returns
a new array. If string or buffer is provided function returns array of chars reversed.
Defined in boot.janet -- 1388 : 1")
("fiber/setmaxstack" . "FUNCTION
(fiber/setmaxstack fib maxstack)

Sets the maximum stack size in janet values for a fiber. By default, the maximum stack size is usually 8192.
Defined in src/core/fiber.c -- 614 : 1")
("true?" . "FUNCTION
(true? x)

Check if x is true.
Defined in boot.janet -- 118 : 1")
("distinct" . "FUNCTION
(distinct xs)

Returns an array of the deduplicated values in xs.
Defined in boot.janet -- 1588 : 1")
("getproto" . "FUNCTION
(getproto x)

Get the prototype of a table or struct. Will return nil if `x` has no prototype.
Defined in src/core/corelib.c -- 471 : 1")
("yield" . "FUNCTION
(yield &opt x)

Yield a value to a parent fiber. When a fiber yields, its execution is paused until another thread resumes it. The fiber will then resume, and the last yield call will return the value that was passed to resume.")
("prin" . "FUNCTION
(prin & xs)

Same as print, but does not add trailing newline.
Defined in src/core/io.c -- 555 : 1")
("case" . "MACRO
(case dispatch & pairs)

Select the body that equals the dispatch value. When pairs
has an odd number of arguments, the last is the default expression.
If no match is found, returns nil.
Defined in boot.janet -- 208 : 1")
("tab&" . "FUNCTION
(table/clone tab)

Create a copy of a table. Updates to the new table will not change the old table, and vice versa.
Defined in src/core/table.c -- 350 : 1")
("tab-rawget" . "FUNCTION
(table/rawget tab key)

Gets a value from a table without looking at the prototype table. If a table tab does not contain t directly, the function will return nil without checking the prototype. Returns the value in the table.
Defined in src/core/table.c -- 340 : 1")
("os-getenv" . "FUNCTION
(os/getenv variable &opt dflt)

Get the string value of an environment variable.
Defined in src/core/os.c -- 1149 : 1")
("funcn" . "FUNCTION
(funcn f n xs)

Apply function F to indexable XS at index N
Defined in boot.janet -- 3926 : 1")
("reverse!" . "FUNCTION
(reverse! t)

Reverses the order of the elements in a given array or buffer and returns it
mutated.
Defined in boot.janet -- 1374 : 1")
("type" . "FUNCTION
(type x)

Returns the type of `x` as a keyword. `x` is one of:

* :nil

* :boolean

* :number

* :array

* :tuple

* :table

* :struct

* :string

* :buffer

* :symbol

* :keyword

* :function

* :cfunction

* :fiber

or another keyword for an abstract type.
Defined in src/core/corelib.c -- 552 : 1")
("nat?" . "FUNCTION
(nat? x)

Check if x can be exactly represented as a non-negative 32 bit signed two's complement integer.
Defined in src/core/corelib.c -- 647 : 1")
("log" . "FUNCTION
(math/log x)

Returns the natural logarithm of x.
Defined in src/core/math.c -- 279 : 1")
("native" . "FUNCTION
(native path &opt env)

Load a native module from the given path. The path must be an absolute or relative path on the file system, and is usually a .so file on Unix systems, and a .dll file on Windows. Returns an environment table that contains functions and other values from the native module.
Defined in src/core/corelib.c -- 314 : 1")
("update-in" . "FUNCTION
(update-in ds ks f & args)

Update a value in a nested data structure by applying f to the current value.
Looks into the data structure via
a sequence of keys. Missing data structures will be replaced with tables. Returns
the modified, original data structure.
Defined in boot.janet -- 1434 : 1")
("nullary" . "MACRO
(nullary & forms)


Defined in boot.janet -- 3910 : 1")
("tab_" . "FUNCTION
(table/clear tab)

Remove all key-value pairs in a table and return the modified table `tab`.
Defined in src/core/table.c -- 359 : 1")
("arr-peek" . "FUNCTION
(array/peek arr)

Returns the last element of the array. Does not modify the array.
Defined in src/core/array.c -- 171 : 1")
("accumulate2" . "FUNCTION
(accumulate2 f ind)

The 2-argument version of accumulate that does not take an initialization value.
The first value in ind will be added to the array as is, so the length of the
return value will be (length ind).
Defined in boot.janet -- 879 : 1")
("peg>" . "FUNCTION
(peg/find peg text &opt start & args)

Find first index where the peg matches in text. Returns an integer, or nil if not found.
Defined in src/core/peg.c -- 1677 : 1")
("os-time" . "FUNCTION
(os/time)

Get the current time expressed as the number of whole seconds since January 1, 1970, the Unix epoch. Returns a real number.
Defined in src/core/os.c -- 1188 : 1")
("stdout" . "FUNCTION
The standard output file.
Defined in src/core/io.c -- 814 : 1")
("eprinf" . "FUNCTION
(eprinf fmt & xs)

Like eprintf but with no trailing newline.
Defined in src/core/io.c -- 659 : 1")
("debug" . "FUNCTION
(debug &opt x)

Throws a debug signal that can be caught by a parent fiber and used to inspect the running state of the current fiber. Returns the value passed in by resume.")
("false?" . "FUNCTION
(false? x)

Check if x is false.
Defined in boot.janet -- 119 : 1")
("eprint" . "FUNCTION
(eprint & xs)

Same as print, but uses (dyn :err stderr) instead of (dyn :out stdout).
Defined in src/core/io.c -- 561 : 1")
("bstr" . "FUNCTION
(bit-str x)

Bit-string of x
Defined in src/core/math.c -- 354 : 1")
("basename" . "FUNCTION
(basename str)


Defined in boot.janet -- 4007 : 1")
("defun-" . "MACRO
(defun- name & more)

Define a private function that will not be exported.
Defined in boot.janet -- 63 : 1")
("propagate" . "FUNCTION
(propagate x fiber)

Propagate a signal from a fiber to the current fiber. The resulting stack trace from the current fiber will include frames from fiber. If fiber is in a state that can be resumed, resuming the current fiber will first resume fiber. This function can be used to re-raise an error without losing the original stack trace.")
("tan" . "FUNCTION
(math/tan x)

Returns the tangent of x.
Defined in src/core/math.c -- 273 : 1")
("peg>!*" . "MACRO
(peg>!* patt text)

Get all matching peg text matching PATT in TEXT
Defined in boot.janet -- 4109 : 1")
("brushift" . "FUNCTION
(brushift x & shifts)

Returns the value of x bit shifted right by the sum of all values in shifts. x and each element in shift must be an integer. The sign of x is not preserved, so for positive shifts the return value will always be positive.")
("flycheck" . "FUNCTION
(flycheck path &keys kwargs)

Check a file for errors without running the file. Found errors will be printed to stderr
in the usual format. Macros will still be executed, however, so
arbitrary execution is possible. Other arguments are the same as dofile. `path` can also be
a file value such as stdin. Returns nil.
Defined in boot.janet -- 3592 : 1")
("log-gamma" . "FUNCTION
(math/lgamma x)

Returns log-gamma(x).
Defined in src/core/math.c -- 290 : 1")
("setdyn" . "FUNCTION
(setdyn key value)

Set a dynamic binding. Returns value.
Defined in src/core/corelib.c -- 303 : 1")
("flush" . "FUNCTION
(flush)

Flush (dyn :out stdout) if it is a file, otherwise do nothing.
Defined in src/core/io.c -- 697 : 1")
("stdin" . "FUNCTION
The standard input file.
Defined in src/core/io.c -- 822 : 1")
("json-decode" . "FUNCTION
(string/trim str &opt set)

Trim leading and trailing whitespace from a byte sequence. If the argument set is provided, consider only characters in set to be whitespace.
Defined in src/core/string.c -- 1158 : 1")
("peg-grammar" . "FUNCTION
")
("curenv" . "FUNCTION
(curenv &opt n)

Get the current environment table. Same as (fiber/getenv (fiber/current)). If n
is provided, gets the nth prototype of the environment table.
Defined in boot.janet -- 2310 : 1")
("module/paths" . "FUNCTION
The list of paths to look for modules, templated for module/expand-path.
Each element is a two-element tuple, containing the path
template and a keyword :source, :native, or :image indicating how
require should load files found at these paths.

A tuple can also
contain a third element, specifying a filter that prevents module/find
from searching that path template if the filter doesn't match the input
path. The filter can be a string or a predicate function, and
is often a file extension, including the period.
Defined in boot.janet -- 2589 : 1")
("thread-last" . "MACRO
(thread-last x & forms)

Threading macro. Inserts x as the last value in the first form
in forms, and inserts the modified first form into the second form
in the same manner, and so on. Useful for expressing pipelines of data.
Defined in boot.janet -- 1213 : 1")
("parse" . "FUNCTION
(parse str)

Parse a string and return the first value. For complex parsing, such as for a repl with error handling,
use the parser api.
Defined in boot.janet -- 2528 : 1")
("forv" . "MACRO
(forv i start stop & body)

Do a C-style for-loop for side effects. The iteration variable `i`
can be mutated in the loop, unlike normal `for`. Returns nil.
Defined in boot.janet -- 497 : 1")
("os-proc-wait" . "FUNCTION
(os/proc-wait proc)

Block until the subprocess completes. Returns the subprocess return code.
Defined in src/core/os.c -- 537 : 1")
("not" . "FUNCTION
(not x)

Returns the boolean inverse of x.
Defined in src/core/math.c -- 308 : 1")
("module/find" . "FUNCTION
(module/find path)

Try to match a module or path name from the patterns in module/paths.
Returns a tuple (fullpath kind) where the kind is one of :source, :native,
or :image if the module is found, otherwise a tuple with nil followed by
an error message.
Defined in boot.janet -- 2649 : 1")
("label" . "MACRO
(label name & body)

Set a label point that is lexically scoped. Name should be a symbol
that will be bound to the label.
Defined in boot.janet -- 362 : 1")
("filter" . "FUNCTION
(filter pred ind)

Given a predicate, take only elements from an array or tuple for
which (pred element) is truthy. Returns a new array.
Defined in boot.janet -- 959 : 1")
("tuple" . "FUNCTION
(tuple & items)

Creates a new tuple that contains items. Returns the new tuple.
Defined in src/core/corelib.c -- 423 : 1")
("s-prefix?" . "FUNCTION
(string/has-prefix? pfx str)

Tests whether str starts with pfx.
Defined in src/core/string.c -- 326 : 1")
("truthy?" . "FUNCTION
(truthy? x)

Check if x is truthy.
Defined in boot.janet -- 117 : 1")
("some" . "FUNCTION
(some pred xs)

Returns nil if all xs are false or nil, otherwise returns the result of the
first truthy predicate, (pred x).
Defined in boot.janet -- 2041 : 1")
("fiber/last-value" . "FUNCTION
(fiber/last-value)

Get the last value returned or signaled from the fiber.
Defined in src/core/fiber.c -- 644 : 1")
("s-check-set" . "FUNCTION
(string/check-set set str)

Checks that the string str only contains bytes that appear in the string set. Returns true if all bytes in str appear in set, false if some bytes in str do not appear in set.
Defined in src/core/string.c -- 464 : 1")
("sh-get-syms" . "FUNCTION
(sh-get-syms li &opt quot)


Defined in boot.janet -- 4150 : 1")
("os-which" . "FUNCTION
(os/which)

Check the current operating system. Returns one of:

* :windows

* :macos

* :web - Web assembly (emscripten)

* :linux

* :freebsd

* :openbsd

* :netbsd

* :posix - A POSIX compatible system (default)

May also return a custom keyword specified at build time.
Defined in src/core/os.c -- 109 : 1")
("$" . "MACRO
($ & args)

Entry point to shell macro. Run as shell command if last arg is :
Defined in boot.janet -- 4159 : 1")
("%" . "FUNCTION
(% dividend divisor)

Returns the remainder of dividend / divisor.")
("max-of" . "FUNCTION
(max-of args)

Returns the numeric maximum of the argument sequence.
Defined in boot.janet -- 710 : 1")
("*" . "FUNCTION
(* & xs)

Returns the product of all elements in xs. If xs is empty, returns 1.")
("+" . "FUNCTION
(+ & xs)

Returns the sum of all xs. xs must be integers or real numbers only. If xs is empty, return 0.")
("-" . "FUNCTION
(- & xs)

Returns the difference of xs. If xs is empty, returns 0. If xs has one element, returns the negative value of that element. Otherwise, returns the first element in xs minus the sum of the rest of the elements.")
("/" . "FUNCTION
(/ & xs)

Returns the quotient of xs. If xs is empty, returns 1. If xs has one value x, returns the reciprocal of x. Otherwise return the first value of xs repeatedly divided by the remaining values.")
("asinh" . "FUNCTION
(math/asinh x)

Returns the hypberbolic arcsine of x.
Defined in src/core/math.c -- 272 : 1")
("tup-sourcemap" . "FUNCTION
(tuple/sourcemap tup)

Returns the sourcemap metadata attached to a tuple,  which is another tuple (line, column).
Defined in src/core/tuple.c -- 96 : 1")
("all" . "FUNCTION
(all pred xs)

Returns true if all xs are truthy, otherwise the result of first
falsey predicate value, (pred x).
Defined in boot.janet -- 2033 : 1")
("<" . "FUNCTION
(< & xs)

Check if xs is in ascending order. Returns a boolean.")
("=" . "FUNCTION
(= & xs)

Check if all values in xs are equal. Returns a boolean.")
(">" . "FUNCTION
(> & xs)

Check if xs is in descending order. Returns a boolean.")
("signal" . "FUNCTION
(signal what x)

Raise a signal with payload x. 
Defined in src/core/corelib.c -- 658 : 1")
("chr" . "MACRO
(chr c)

Convert a string of length 1 to its byte (ascii) value at compile time.
Defined in boot.janet -- 355 : 1")
("bifunc1" . "FUNCTION
(bifunc1 f xs)


Defined in boot.janet -- 3931 : 1")
("bifunc2" . "FUNCTION
(bifunc2 f xs)


Defined in boot.janet -- 3932 : 1")
("debug/lineage" . "FUNCTION
(debug/lineage fib)

Returns an array of all child fibers from a root fiber. This function is useful when a fiber signals or errors to an ancestor fiber. Using this function, the fiber handling the error can see which fiber raised the signal. This function should be used mostly for debugging purposes.
Defined in src/core/debug.c -- 263 : 1")
("os-date" . "FUNCTION
(os/date &opt time local)

Returns the given time as a date struct, or the current time if `time` is not given. Returns a struct with following key values. Note that all numbers are 0-indexed. Date is given in UTC unless `local` is truthy, in which case the date is formatted for the local timezone.

* :seconds - number of seconds [0-61]

* :minutes - number of minutes [0-59]

* :hours - number of hours [0-23]

* :month-day - day of month [0-30]

* :month - month of year [0, 11]

* :year - years since year 0 (e.g. 2019)

* :week-day - day of the week [0-6]

* :year-day - day of the year [0-365]

* :dst - if Day Light Savings is in effect
Defined in src/core/os.c -- 1271 : 1")
("flatten" . "FUNCTION
(flatten xs)

Takes a nested array (tree), and returns the depth first traversal of
that array. Returns a new array.
Defined in boot.janet -- 1606 : 1")
("env-lookup" . "FUNCTION
(env-lookup env)

Creates a forward lookup table for unmarshalling from an environment. To create a reverse lookup table, use the invert function to swap keys and values in the returned table.
Defined in src/core/marsh.c -- 1463 : 1")
("struct/with-proto" . "FUNCTION
(struct/with-proto proto & kvs)

Create a structure, as with the usual struct constructor but set the struct prototype as well.
Defined in src/core/struct.c -- 207 : 1")
("os-touch" . "FUNCTION
(os/touch path &opt actime modtime)

Update the access time and modification times for a file. By default, sets times to the current time.
Defined in src/core/os.c -- 1522 : 1")
("frequencies" . "FUNCTION
(frequencies ind)

Get the number of occurrences of each value in a indexed structure.
Defined in boot.janet -- 1537 : 1")
("nil?" . "FUNCTION
(nil? x)

Check if x is nil.
Defined in boot.janet -- 120 : 1")
("quit" . "FUNCTION
(quit &opt value)

Tries to exit from the current repl or context. Does not always exit the application.
Works by setting the :exit dynamic binding to true. Passing a non-nil value here will cause the outer
run-context to return that value.
Defined in boot.janet -- 2484 : 1")
("e" . "FUNCTION
The base of the natural log.
Defined in src/core/math.c -- 435 : 1")
("min-of" . "FUNCTION
(min-of args)

Returns the numeric minimum of the argument sequence.
Defined in boot.janet -- 714 : 1")
("tail" . "FUNCTION
(tail xs)

Gets all but the first element of XS
Defined in boot.janet -- 3872 : 1")
("os-stat" . "FUNCTION
(os/stat path &opt tab|key)

Gets information about a file or directory. Returns a table if the second argument is a keyword, returns  only that information from stat. If the file or directory does not exist, returns nil. The keys are:

* :dev - the device that the file is on

* :mode - the type of file, one of :file, :directory, :block, :character, :fifo, :socket, :link, or :other

* :int-permissions - A Unix permission integer like 8r744

* :permissions - A Unix permission string like \"rwxr--r--\"

* :uid - File uid

* :gid - File gid

* :nlink - number of links to file

* :rdev - Real device of file. 0 on windows.

* :size - size of file in bytes

* :blocks - number of blocks in file. 0 on windows

* :blocksize - size of blocks in file. 0 on windows

* :accessed - timestamp when file last accessed

* :changed - timestamp when file last changed (permissions changed)

* :modified - timestamp when file last modified (content changed)

Defined in src/core/os.c -- 1823 : 1")
("trunc" . "FUNCTION
(math/trunc x)

Returns the integer between x and 0 nearest to x.
Defined in src/core/math.c -- 287 : 1")
("parser/produce" . "FUNCTION
(parser/produce parser &opt wrap)

Dequeue the next value in the parse queue. Will return nil if no parsed values are in the queue, otherwise will dequeue the next value. If `wrap` is truthy, will return a 1-element tuple that wraps the result. This tuple can be used for source-mapping purposes.
Defined in src/core/parse.c -- 1037 : 1")
("load-image" . "FUNCTION
(load-image image)

The inverse operation to make-image. Returns an environment.
Defined in boot.janet -- 2575 : 1")
("and" . "MACRO
(and & forms)

Evaluates to the last argument if all preceding elements are truthy, otherwise
evaluates to the first falsey argument.
Defined in boot.janet -- 270 : 1")
("log2" . "FUNCTION
(math/log2 x)

Returns the log base 2 of x.
Defined in src/core/math.c -- 281 : 1")
("pow" . "FUNCTION
(math/pow a x)

Returns a to the power of x.
Defined in src/core/math.c -- 304 : 1")
("array" . "FUNCTION
(array & items)

Create a new array that contains items. Returns the new array.
Defined in src/core/corelib.c -- 429 : 1")
("defmacro" . "MACRO
(defmacro name & more)

Define a macro.
Defined in boot.janet -- 45 : 1")
("parser/new" . "FUNCTION
(parser/new)

Creates and returns a new parser object. Parsers are state machines that can receive bytes, and generate a stream of values.
Defined in src/core/parse.c -- 883 : 1")
("gcd" . "FUNCTION
(math/gcd x y)

Returns the greatest common divisor between x and y.
Defined in src/core/math.c -- 334 : 1")
("os-rm" . "FUNCTION
(os/rm path)

Delete a file. Returns nil.
Defined in src/core/os.c -- 1545 : 1")
("untrace" . "FUNCTION
(untrace func)

Disables tracing on a function. Returns the function.
Defined in src/core/corelib.c -- 627 : 1")
("defun" . "MACRO
(defun name & more)

Define a function. Equivalent to (def name (fn name [args] ...)).
Defined in boot.janet -- 10 : 1")
("as-macro" . "MACRO
(as-macro f & args)

Use a function or macro literal `f` as a macro. This lets
any function be used as a macro. Inside a quasiquote, the
idiom `(as-macro ,my-custom-macro arg1 arg2...)` can be used
to avoid unwanted variable capture of `my-custom-macro`.
Defined in boot.janet -- 50 : 1")
("group-by" . "FUNCTION
(group-by f ind)

Group elements of `ind` by a function `f` and put the results into a table. The keys of
the table are the distinct return values of `f`, and the values are arrays of all elements of `ind`
that are equal to that value.
Defined in boot.janet -- 1546 : 1")
("os-chmod" . "FUNCTION
(os/chmod path mode)

Change file permissions, where mode is a permission string as returned by os/perm-string, or an integer as returned by os/perm-int. When mode is an integer, it is interpreted as a Unix permission value, best specified in octal, like 8r666 or 8r400. Windows will not differentiate between user, group, and other permissions, and thus will combine all of these permissions. Returns nil.
Defined in src/core/os.c -- 1850 : 1")
("parser/flush" . "FUNCTION
(parser/flush parser)

Clears the parser state and parse queue. Can be used to reset the parser if an error was encountered. Does not reset the line and column counter, so to begin parsing in a new context, create a new parser.
Defined in src/core/parse.c -- 1053 : 1")
("product" . "FUNCTION
(product xs)

Returns the product of xs. If xs is empty, returns 1.
Defined in boot.janet -- 626 : 1")
("take" . "FUNCTION
(take n ind)

Take the first n elements of a fiber, indexed or bytes type. Returns a new array, tuple or string, respectively.
Defined in boot.janet -- 1083 : 1")
("apply" . "FUNCTION
(apply f & args)

Applies a function to a variable number of arguments. Each element in args is used as an argument to f, except the last element in args, which is expected to be an array-like. Each element in this last argument is then also pushed as an argument to f. For example:

	(apply + 1000 (range 10))

sums the first 10 integers and 1000.")
("buf-bit_" . "FUNCTION
(buffer/bit-clear buffer index)

Clears the bit at the given bit-index. Returns the buffer.
Defined in src/core/buffer.c -- 368 : 1")
("cfunction?" . "FUNCTION
(cfunction? x)

Check if x a cfunction.
Defined in boot.janet -- 102 : 1")
("s-suffix?" . "FUNCTION
(string/has-suffix? sfx str)

Tests whether str ends with sfx.
Defined in src/core/string.c -- 337 : 1")
("cli" . "MACRO
(cli & forms)


Defined in boot.janet -- 4179 : 1")
("freeze" . "FUNCTION
(freeze x)

Freeze an object (make it immutable) and do a deep copy, making
child values also immutable. Closures, fibers, and abstract types
will not be recursively frozen, but all other types will.
Defined in boot.janet -- 2070 : 1")
("arr-new*" . "FUNCTION
(array/new-filled count &opt value)

Creates a new array of `count` elements, all set to `value`, which defaults to nil. Returns the new array.
Defined in src/core/array.c -- 135 : 1")
("rng" . "FUNCTION
(math/rng &opt seed)

Creates a Psuedo-Random number generator, with an optional seed. The seed should be an unsigned 32 bit integer or a buffer. Do not use this for cryptography. Returns a core/rng abstract type.
Defined in src/core/math.c -- 120 : 1")
("sort" . "FUNCTION
(sort ind &opt before?)

Sort `ind` in-place, and return it. Uses quick-sort and is not a stable sort.
If a `before?` comparator function is provided, sorts elements using that,
otherwise uses `<`.
Defined in boot.janet -- 816 : 1")
("int?" . "FUNCTION
(int? x)

Check if x can be exactly represented as a 32 bit signed two's complement integer.
Defined in src/core/corelib.c -- 636 : 1")
("file->" . "FUNCTION
(file-> file-path content)

Dump to file-path a string content
Defined in boot.janet -- 4021 : 1")
("os-cwd" . "FUNCTION
(os/cwd)

Returns the current working directory.
Defined in src/core/os.c -- 1231 : 1")
("*doc-width*" . "FUNCTION
Width in columns to print documentation printed with `doc-format`
Defined in boot.janet -- 2871 : 1")
("if-with" . "MACRO
(if-with [binding ctor dtor] truthy &opt falsey)

Similar to with, but if binding is false or nil, evaluates
the falsey path. Otherwise, evaluates the truthy path. In both cases,
ctor is bound to binding.
Defined in boot.janet -- 392 : 1")
("cmp" . "FUNCTION
(cmp x y)

Returns -1 if x is strictly less than y, 1 if y is strictly greater than x, and 0 otherwise. To return 0, x and y must be the exact same type.")
("get" . "FUNCTION
(get ds key &opt dflt)

Get the value mapped to key in data structure ds, and return dflt or nil if not found. Similar to in, but will not throw an error if the key is invalid for the data structure unless the data structure is an abstract type. In that case, the abstract type getter may throw an error.")
("module/cache" . "FUNCTION
Table mapping loaded module identifiers to their environments.
Defined in boot.janet -- 2585 : 1")
("s>:>" . "MACRO
(s>:> str fbeg fend)

Slice STR from FBEG until FEND
Defined in boot.janet -- 3952 : 1")
("awk-file" . "FUNCTION
(awk-file data file)

Execute actions on every line of a file (object).First arg is a table, key is a peg and value is a single form to be run on everyline that the peg matches. Forms have access to several variables:line: trimmed linewds: line split by whitespacewdsn: words of the line, all converted to numbersf: a function to get the nth field of the linen: a function to get the nth field of the line, as a numberNF: number of fields_<number>: shorthand for (f <number>)
Defined in boot.janet -- 4082 : 1")
("symbol?" . "FUNCTION
(symbol? x)

Check if x is a symbol.
Defined in boot.janet -- 97 : 1")
("defdyn" . "MACRO
(defdyn alias & more)

Define an alias for a keyword that is used as a dynamic binding. The
alias is a normal, lexically scoped binding that can be used instead of
a keyword to prevent typos. Defdyn does not set dynamic bindings or otherwise
replace `dyn` and `setdyn`. The alias _must_ start and end with the `*` character, usually
called \"earmuffs\".
Defined in boot.janet -- 1160 : 1")
("with" . "MACRO
(with [binding ctor dtor] & body)

Evaluate body with some resource, which will be automatically cleaned up
if there is an error in body. binding is bound to the expression ctor, and
dtor is a function or callable that is passed the binding. If no destructor
(dtor) is given, will call :close on the resource.
Defined in boot.janet -- 375 : 1")
("merge-module" . "FUNCTION
(merge-module target source &opt prefix export)

Merge a module source into the target environment with a prefix, as with the import macro.
This lets users emulate the behavior of import with a custom module table.
If export is truthy, then merged functions are not marked as private. Returns
the modified target environment.
Defined in boot.janet -- 2792 : 1")
("os-proc-close" . "FUNCTION
(os/proc-close proc)

Wait on a process if it has not been waited on, and close pipes created by `os/spawn` if they have not been closed. Returns nil.
Defined in src/core/os.c -- 587 : 1")
("file-read" . "FUNCTION
(file/read f what &opt buf)

Read a number of bytes from a file `f` into a buffer. A buffer `buf` can be provided as an optional third argument, otherwise a new buffer is created. `what` can either be an integer or a keyword. Returns the buffer with file contents. Values for `what`:

* :all - read the whole file

* :line - read up to and including the next newline character

* n (integer) - read up to n bytes from the file
Defined in src/core/io.c -- 208 : 1")
("identity" . "FUNCTION
(identity x)

A function that returns its argument.
Defined in boot.janet -- 683 : 1")
("tanh" . "FUNCTION
(math/tanh x)

Returns the hyperbolic tangent of x.
Defined in src/core/math.c -- 274 : 1")
("s->/" . "FUNCTION
(s->/ patt str)

Left partition STR on PATT
Defined in boot.janet -- 3993 : 1")
("maclintf" . "FUNCTION
(maclintf level fmt & args)

When inside a macro, call this function to add a linter warning. Takes
a `fmt` argument like `s-fmt` which is used to format the message.
Defined in boot.janet -- 1918 : 1")
("make-image" . "FUNCTION
(make-image env)

Create an image from an environment returned by require.
Returns the image source as a string.
Defined in boot.janet -- 2569 : 1")
("mapcat" . "FUNCTION
(mapcat f ind)

Map a function over every element in an array or tuple and
use array to concatenate the results.
Defined in boot.janet -- 950 : 1")
("buf-bit-toggle" . "FUNCTION
(buffer/bit-toggle buffer index)

Toggles the bit at the given bit index in buffer. Returns the buffer.
Defined in src/core/buffer.c -- 389 : 1")
("os-clock" . "FUNCTION
(os/clock)

Return the number of whole + fractional seconds since some fixed point in time. The clock is guaranteed to be non decreasing in real time.
Defined in src/core/os.c -- 1198 : 1")
("eachk" . "MACRO
(eachk x ds & body)

Loop over each key in ds. Returns nil.
Defined in boot.janet -- 508 : 1")
("next" . "FUNCTION
(next ds &opt key)

Gets the next key in a data structure. Can be used to iterate through the keys of a data structure in an unspecified order. Keys are guaranteed to be seen only once per iteration if they data structure is not mutated during iteration. If key is nil, next returns the first key. If next returns nil, there are no more keys to iterate through.")
("rng-int" . "FUNCTION
(math/rng-int rng &opt max)

Extract a random random integer in the range [0, max] from the RNG. If no max is given, the default is 2^31 - 1.
Defined in src/core/math.c -- 151 : 1")
("asm" . "FUNCTION
(asm assembly)

Returns a new function that is the compiled result of the assembly.
The syntax for the assembly can be found on the Janet website, and should correspond
to the return value of disasm. Will throw an
error on invalid assembly.
Defined in src/core/asm.c -- 945 : 1")
("eachp" . "MACRO
(eachp x ds & body)

Loop over each (key, value) pair in ds. Returns nil.
Defined in boot.janet -- 513 : 1")
("one?" . "FUNCTION
(one? x)

Check if x is equal to 1.
Defined in boot.janet -- 780 : 1")
("cos" . "FUNCTION
(math/cos x)

Returns the cosine of x.
Defined in src/core/math.c -- 267 : 1")
("tup-type" . "FUNCTION
(tuple/type tup)

Checks how the tuple was constructed. Will return the keyword :brackets if the tuple was parsed with brackets, and :parens otherwise. The two types of tuples will behave the same most of the time, but will print differently and be treated differently by the compiler.
Defined in src/core/tuple.c -- 80 : 1")
("every?" . "FUNCTION
(every? ind)

Returns true if each value in is truthy, otherwise the first
falsey value.
Defined in boot.janet -- 1356 : 1")
("xprintf" . "FUNCTION
(xprintf to fmt & xs)

Like printf but prints to an explicit file or value to. Returns nil.
Defined in src/core/io.c -- 665 : 1")
("slice" . "FUNCTION
(slice x &opt start end)

Extract a sub-range of an indexed data structure or byte sequence.
Defined in src/core/corelib.c -- 438 : 1")
("*profilepath*" . "FUNCTION
Path to profile file loaded when starting up the repl.
Defined in boot.janet -- 3632 : 1")
("put" . "FUNCTION
(put ds key value)

Associate a key with a value in any mutable associative data structure. Indexed data structures (arrays and buffers) only accept non-negative integer keys, and will expand if an out of bounds value is provided. In an array, extra space will be filled with nils, and in a buffer, extra space will be filled with 0 bytes. In a table, putting a key that is contained in the table prototype will hide the association defined by the prototype, but will not mutate the prototype table. Putting a value nil into a table will remove the key from the table. Returns the data structure ds.")
("varfn" . "MACRO
(varfn name & body)

Create a function that can be rebound. varfn has the same signature
as defun, but defines functions in the environment as vars. If a var 'name'
already exists in the environment, it is rebound to the new function. Returns
a function.
Defined in boot.janet -- 2102 : 1")
("exp2" . "FUNCTION
(math/exp2 x)

Returns 2 to the power of x.
Defined in src/core/math.c -- 277 : 1")
("keyword" . "FUNCTION
(keyword & xs)

Creates a keyword by concatenating the elements of `xs` together. If an element is not a byte sequence, it is converted to bytes via `describe`. Returns the new keyword.
Defined in src/core/corelib.c -- 374 : 1")
("idx" . "FUNCTION
(idx k ds)

Index k'th item of ds
Defined in boot.janet -- 3852 : 1")
("compare" . "FUNCTION
(compare x y)

Polymorphic compare. Returns -1, 0, 1 for x < y, x = y, x > y respectively.
Differs from the primitive comparators in that it first checks to
see whether either x or y implement a `compare` method which can
compare x and y. If so, it uses that method. If not, it
delegates to the primitive comparators.
Defined in boot.janet -- 730 : 1")
("sqrt" . "FUNCTION
(math/sqrt x)

Returns the square root of x.
Defined in src/core/math.c -- 282 : 1")
("s/<-" . "FUNCTION
(s/<- patt str)

Right partition STR on PATT
Defined in boot.janet -- 4000 : 1")
("s->n" . "FUNCTION
(scan-number str &opt base)

Parse a number from a byte sequence and return that number, either an integer or a real. The number must be in the same format as numbers in janet source code. Will return nil on an invalid number. Optionally provide a base - if a base is provided, no radix specifier is expected at the beginning of the number.
Defined in src/core/corelib.c -- 403 : 1")
("os-arch" . "FUNCTION
(os/arch)

Check the ISA that janet was compiled for. Returns one of:

* :x86

* :x64

* :arm

* :aarch64

* :sparc

* :wasm

* :unknown

Defined in src/core/os.c -- 147 : 1")
("interleave" . "FUNCTION
(interleave & cols)

Returns an array of the first elements of each col, then the second, etc.
Defined in boot.janet -- 1576 : 1")
("parser/insert" . "FUNCTION
(parser/insert parser value)

Insert a value into the parser. This means that the parser state can be manipulated in between chunks of bytes. This would allow a user to add extra elements to arrays and tuples, for example. Returns the parser.
Defined in src/core/parse.c -- 932 : 1")
("symbol" . "FUNCTION
(symbol & xs)

Creates a symbol by concatenating the elements of `xs` together. If an element is not a byte sequence, it is converted to bytes via `describe`. Returns the new symbol.
Defined in src/core/corelib.c -- 363 : 1")
("os-lstat" . "FUNCTION
(os/lstat path &opt tab|key)

Like os/stat, but don't follow symlinks.

Defined in src/core/os.c -- 1844 : 1")
("interpose" . "FUNCTION
(interpose sep ind)

Returns a sequence of the elements of ind separated by
sep. Returns a new array.
Defined in boot.janet -- 1629 : 1")
("debug/unbreak" . "FUNCTION
(debug/unbreak source line column)

Remove a breakpoint with a source key at a given line and column. Will throw an error if the breakpoint cannot be found.
Defined in src/core/debug.c -- 229 : 1")
("make-image-dict" . "FUNCTION
A table used in combination with marshal to marshal code (images), such that
(make-image x) is the same as (marshal x make-image-dict).
Defined in boot.janet -- 2546 : 1")
("cli-main" . "FUNCTION
(cli-main args)

Entrance for the Janet CLI tool. Call this function with the command line
arguments as an array or tuple of strings to invoke the CLI interface.
Defined in boot.janet -- 3635 : 1")
("$*" . "MACRO
($* & forms)

Run many shell macros.
Defined in boot.janet -- 4166 : 1")
("resume" . "FUNCTION
(resume fiber &opt x)

Resume a new or suspended fiber and optionally pass in a value to the fiber that will be returned to the last yield in the case of a pending fiber, or the argument to the dispatch function in the case of a new fiber. Returns either the return result of the fiber's dispatch function, or the value from the next yield call in fiber.")
("complement" . "FUNCTION
(complement f)

Returns a function that is the complement to the argument.
Defined in boot.janet -- 688 : 1")
("pairs" . "FUNCTION
(pairs x)

Get the key-value pairs of an associative data structure.
Defined in boot.janet -- 1527 : 1")
("random" . "FUNCTION
(math/random)

Returns a uniformly distributed random number between 0 and 1
Defined in src/core/math.c -- 232 : 1")
("int32-max" . "FUNCTION
The maximum contiguous integer represtenable by a 32 bit signed integer
Defined in src/core/math.c -- 443 : 1")
("struct?" . "FUNCTION
(struct? x)

Check if x a struct.
Defined in boot.janet -- 104 : 1")
("keep" . "FUNCTION
(keep pred ind)

Given a predicate `pred`, return a new array containing the truthy results
of applying `pred` to each element in the indexed collection `ind`. This is
different from `filter` which returns an array of the original elements where
the predicate is truthy.
Defined in boot.janet -- 979 : 1")
("getline" . "FUNCTION
(getline &opt prompt buf env)

Reads a line of input into a buffer, including the newline character, using a prompt. An optional environment table can be provided for auto-complete. Returns the modified buffer. Use this function to implement a simple interface for a terminal program.
Defined in src/core/corelib.c -- 588 : 1")
("s/>*" . "FUNCTION
(string/replace-all patt subst str)

Replace all instances of patt with subst in the string str. Overlapping matches will not be counted, only the first match in such a span will be replaced. Will return the new string if patt is found, otherwise returns str.
Defined in src/core/string.c -- 412 : 1")
("module/expand-path" . "FUNCTION
(module/expand-path path template)

Expands a path template as found in `module/paths` for `module/find`. This takes in a path (the argument to require) and a template string, to expand the path to a path that can be used for importing files. The replacements are as follows:

* :all: -- the value of path verbatim

* :cur: -- the current file, or (dyn :current-file)

* :dir: -- the directory containing the current file

* :name: -- the name component of path, with extension if given

* :native: -- the extension used to load natives, .so or .dll

* :sys: -- the system path, or (dyn :syspath)
Defined in src/core/corelib.c -- 153 : 1")
("arr->" . "FUNCTION
(array/pop arr)

Remove the last element of the array and return it. If the array is empty, will return nil. Modifies the input array.
Defined in src/core/array.c -- 162 : 1")
("repl" . "FUNCTION
(repl &opt chunks onsignal env parser read)

Run a repl. The first parameter is an optional function to call to
get a chunk of source code that should return nil for end of file.
The second parameter is a function that is called when a signal is
caught. One can provide an optional environment table to run
the repl in, as well as an optional parser or read function to pass
to `run-context.`
Defined in boot.janet -- 3398 : 1")
("dofile" . "FUNCTION
(dofile path &keys {:read read :parser parser :source src :evaluator evaluator :expander expander :env env :exit exit})

Evaluate a file, file path, or stream and return the resulting environment. :env, :expander,
:source, :evaluator, :read, and :parser are passed through to the underlying
run-context call. If exit is true, any top level errors will trigger a
call to (os-exit 1) after printing the error.
Defined in boot.janet -- 2683 : 1")
("forever" . "MACRO
(forever & body)

Evaluate body forever in a loop, or until a break statement.
Defined in boot.janet -- 524 : 1")
("indexed?" . "FUNCTION
(indexed? x)

Check if x is an array or tuple.
Defined in boot.janet -- 114 : 1")
("%=" . "MACRO
(%= x n)

Shorthand for (set x (% x n)).
Defined in boot.janet -- 151 : 1")
("awk" . "MACRO
(awk data)


Defined in boot.janet -- 4104 : 1")
("s-from-bytes" . "FUNCTION
(string/from-bytes & byte-vals)

Creates a string from integer parameters with byte values. All integers will be coerced to the range of 1 byte 0-255.
Defined in src/core/string.c -- 234 : 1")
("peg/>" . "FUNCTION
(peg/replace peg repl text &opt start & args)

Replace first match of peg in text with repl, returning a new buffer. The peg does not need to make captures to do replacement. If no matches are found, returns the input string in a new buffer.
Defined in src/core/peg.c -- 1736 : 1")
("bnot" . "FUNCTION
(bnot x)

Returns the bit-wise inverse of integer x.")
("os-cryptorand" . "FUNCTION
(os/cryptorand n &opt buf)

Get or append n bytes of good quality random data provided by the OS. Returns a new buffer or buf.
Defined in src/core/os.c -- 1247 : 1")
("os-spawn" . "FUNCTION
(os/spawn args &opt flags env)

Execute a program on the system and return a handle to the process. Otherwise, the same arguments as os/execute. Does not wait for the process. The returned value has the fields :in, :out, :err, :return-code and the additional field :pid on unix like platforms.
Defined in src/core/os.c -- 1075 : 1")
("loop" . "MACRO
(loop head & body)

A general purpose loop macro. This macro is similar to the Common Lisp loop
macro, although intentionally much smaller in scope.  The head of the loop
should be a tuple that contains a sequence of either bindings or
conditionals. A binding is a sequence of three values that define something
to loop over. Bindings are written in the format:

    binding :verb object/expression

where `binding` is a binding as passed to def, `:verb` is one of a set of
keywords, and `object` is any expression. Each subsequent binding creates a
nested loop within the loop created by the previous binding.

The available verbs are:

* `:iterate` - repeatedly evaluate and bind to the expression while it is
  truthy.
* `:range` - loop over a range. The object should be a two-element tuple with
  a start and end value, and an optional positive step. The range is half
  open, [start, end).
* `:range-to` - same as :range, but the range is inclusive [start, end].
* `:down` - loop over a range, stepping downwards. The object should be a
  two-element tuple with a start and (exclusive) end value, and an optional
  (positive!) step size.
* `:down-to` - same as :down, but the range is inclusive [start, end].
* `:keys` - iterate over the keys in a data structure.
* `:pairs` - iterate over the key-value pairs as tuples in a data structure.
* `:in` - iterate over the values in a data structure or fiber.

`loop` also accepts conditionals to refine the looping further. Conditionals are of
the form:

    :modifier argument

where `:modifier` is one of a set of keywords, and `argument` is keyword-dependent.
`:modifier` can be one of:

* `:while expression` - breaks from the current loop if `expression` is
  falsey.
* `:until expression` - breaks from the current loop if `expression` is
  truthy.
* `:let bindings` - defines bindings inside the current loop as passed to the
  `let` macro.
* `:before form` - evaluates a form for a side effect before the next inner
  loop.
* `:after form` - same as `:before`, but the side effect happens after the
  next inner loop.
* `:repeat n` - repeats the next inner loop `n` times.
* `:when condition` - only evaluates the current loop body when `condition`
  is true.

The `loop` macro always evaluates to nil.
Defined in boot.janet -- 534 : 1")
("mean" . "FUNCTION
(mean xs)

Returns the mean of xs. If empty, returns NaN.
Defined in boot.janet -- 621 : 1")
("*defdyn-prefix*" . "FUNCTION
Optional namespace prefix to add to keywords declared with `defdyn`.  Use this to prevent keyword collisions between dynamic bindings.
Defined in boot.janet -- 1173 : 1")
("asin" . "FUNCTION
(math/asin x)

Returns the arcsin of x.
Defined in src/core/math.c -- 265 : 1")
("os-symlink" . "FUNCTION
(os/symlink oldpath newpath)

Create a symlink from oldpath to newpath, returning nil. Same as (os/link oldpath newpath true).
Defined in src/core/os.c -- 1457 : 1")
("buffer?" . "FUNCTION
(buffer? x)

Check if x is a buffer.
Defined in boot.janet -- 99 : 1")
("root-env" . "FUNCTION
The root environment used to create environments with (make-env).")
("import" . "MACRO
(import path & args)

Import a module. First requires the module, and then merges its
symbols into the current environment, prepending a given prefix as needed.
(use the :as or :prefix option to set a prefix). If no prefix is provided,
use the name of the module as a prefix. One can also use :export true
to re-export the imported symbols. If :exit true is given as an argument,
any errors encountered at the top level in the module will cause (os-exit 1)
to be called. Dynamic bindings will NOT be imported. Use :fresh to bypass the
module cache.
Defined in boot.janet -- 2819 : 1")
("put-in" . "FUNCTION
(put-in ds ks v)

Put a value into a nested data structure.
Looks into the data structure via
a sequence of keys. Missing data structures will be replaced with tables. Returns
the modified, original data structure.
Defined in boot.janet -- 1456 : 1")
("map" . "FUNCTION
(map f & inds)

Map a function over every value in a data structure and
return an array of the results.
Defined in boot.janet -- 896 : 1")
("try" . "MACRO
(try body catch)

Try something and catch errors. Body is any expression,
and catch should be a form with the first element a tuple. This tuple
should contain a binding for errors and an optional binding for
the fiber wrapping the body. Returns the result of body if no error,
or the result of catch if an error.
Defined in boot.janet -- 244 : 1")
("as->" . "MACRO
(as-> x as & forms)

Thread forms together, replacing as in forms with the value
of the previous form. The first for is the value x. Returns the
last value.
Defined in boot.janet -- 1296 : 1")
("max" . "FUNCTION
(max & args)

Returns the numeric maximum of the arguments.
Defined in boot.janet -- 702 : 1")
("s-fmt" . "FUNCTION
(string/format format & values)

Similar to snprintf, but specialized for operating with Janet values. Returns a new string.
Defined in src/core/string.c -- 533 : 1")
("fiber-fn" . "MACRO
(fiber-fn flags & body)

A wrapper for making fibers. Same as (fiber/new (fn [] ;body) flags).
Defined in boot.janet -- 609 : 1")
("flip" . "FUNCTION
(flip f)

Return a new function with the args flipped
Defined in boot.janet -- 3846 : 1")
("trace" . "FUNCTION
(trace func)

Enable tracing on a function. Returns the function.
Defined in src/core/corelib.c -- 618 : 1")
("file-popen" . "FUNCTION
(file/popen command &opt mode) (DEPRECATED for os/spawn)

Open a file that is backed by a process. The file must be opened in either the :r (read) or the :w (write) mode. In :r mode, the stdout of the process can be read from the file. In :w mode, the stdin of the process can be written to. Returns the new file.
Defined in src/core/io.c -- 117 : 1")
("debugger-env" . "FUNCTION
An environment that contains dot prefixed functions for debugging.
Defined in boot.janet -- 3385 : 1")
("erf" . "FUNCTION
(math/erf x)

Returns the error function of x.
Defined in src/core/math.c -- 292 : 1")
("import*" . "FUNCTION
(import* path & args)

Function form of import. Same parameters, but the path
and other symbol parameters should be strings instead.
Defined in boot.janet -- 2803 : 1")
("warn-compile" . "FUNCTION
(warn-compile msg level where &opt line col)

Default handler for a compile warning
Defined in boot.janet -- 2272 : 1")
("comp" . "FUNCTION
(comp & functions)

Takes multiple functions and returns a function that is the composition
of those functions.
Defined in boot.janet -- 669 : 1")
("var-" . "MACRO
(var- name & more)

Define a private var that will not be exported.
Defined in boot.janet -- 73 : 1")
("string?" . "FUNCTION
(string? x)

Check if x is a string.
Defined in boot.janet -- 96 : 1")
("invert" . "FUNCTION
(invert ds)

Returns a table where the keys of an associative data structure
are the values, and the values are the keys. If multiple keys in `ds`
are mapped to the same value, only one of those values will
become a key in the returned table.
Defined in boot.janet -- 1400 : 1")
("cond" . "MACRO
(cond & pairs)

Evaluates conditions sequentially until the first true condition
is found, and then executes the corresponding body. If there are an
odd number of forms, and no forms are matched, the last expression
is executed. If there are no matches, return nil.
Defined in boot.janet -- 193 : 1")
("partial" . "FUNCTION
(partial f & more)

Partial function application.
Defined in boot.janet -- 1350 : 1")
("sort-by" . "FUNCTION
(sort-by f ind)

Returns `ind` sorted by calling
a function `f` on each element and comparing the result with `<`.
Defined in boot.janet -- 823 : 1")
("band" . "FUNCTION
(band & xs)

Returns the bit-wise and of all values in xs. Each x in xs must be an integer.")
("tab-to-struct" . "FUNCTION
(table/to-struct tab)

Convert a table to a struct. Returns a new struct. This function does not take into account prototype tables.
Defined in src/core/table.c -- 331 : 1")
("sorted-by" . "FUNCTION
(sorted-by f ind)

Returns a new sorted array that compares elements by invoking
a function `f` on each element and comparing the result with `<`.
Defined in boot.janet -- 836 : 1")
("*=" . "MACRO
(*= x n)

Shorthand for (set x (* x n)).
Defined in boot.janet -- 149 : 1")
("round" . "FUNCTION
(math/round x)

Returns the integer nearest to x.
Defined in src/core/math.c -- 288 : 1")
("file+" . "FUNCTION
(file+ file-path content)

Append to file-path a string content
Defined in boot.janet -- 4028 : 1")
("generate" . "MACRO
(generate head & body)

Create a generator expression using the loop syntax. Returns a fiber
that yields all values inside the loop in order. See loop for details.
Defined in boot.janet -- 598 : 1")
("values" . "FUNCTION
(values x)

Get the values of an associative data structure.
Defined in boot.janet -- 1517 : 1")
("atan2" . "FUNCTION
(math/atan2 y x)

Returns the arctangent of y/x. Works even when x is 0.
Defined in src/core/math.c -- 303 : 1")
("string" . "FUNCTION
(string & xs)

Creates a string by concatenating the elements of `xs` together. If an element is not a byte sequence, it is converted to bytes via `describe`. Returns the new string.
Defined in src/core/corelib.c -- 352 : 1")
("++" . "MACRO
(++ x)

Increments the var x by 1.
Defined in boot.janet -- 145 : 1")
("os-readlink" . "FUNCTION
(os/readlink path)

Read the contents of a symbolic link. Does not work on Windows.

Defined in src/core/os.c -- 1556 : 1")))